[
  {
    "objectID": "game/game_test.html",
    "href": "game/game_test.html",
    "title": "Game Test",
    "section": "",
    "text": "from rl18xx.game.gamemap import GameMap\nfrom rl18xx.game.actionfinder import ActionHelper\ngame_map = GameMap()\ngame = game_map.game_by_title(\"1830\")\ng = game({\"1\": \"Player 1\", \"2\": \"Player 2\", \"3\": \"Player 3\", \"4\": \"Player 4\"})\naction_helper = ActionHelper(g)\n# action_helper.print_enabled = True",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#waterfall-auction",
    "href": "game/game_test.html#waterfall-auction",
    "title": "Game Test",
    "section": "Waterfall auction",
    "text": "Waterfall auction\n\n[player.id for player in g.players]\n\n['1', '2', '3', '4']\n\n\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\ng.process_action(action_helper.get_all_choices()[1])  # bid 45 on CS\ng.process_action(action_helper.get_all_choices()[1])  # bid 50 on CS\ng.process_action(action_helper.get_all_choices()[-77])  # bid 225 on BO\ng.process_action(action_helper.get_all_choices()[0])  # buy SV\ng.process_action(action_helper.get_all_choices()[-1])  # pass\ng.process_action(action_helper.get_all_choices()[0])  # buy DH\ng.process_action(action_helper.get_all_choices()[0])  # buy MH\ng.process_action(action_helper.get_all_choices()[0])  # buy CA\ng.process_action(action_helper.get_all_choices()[0])  # Par B&O at 100\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#stock-round-1",
    "href": "game/game_test.html#stock-round-1",
    "title": "Game Test",
    "section": "Stock Round 1",
    "text": "Stock Round 1\n\ng.process_action(action_helper.get_all_choices()[-2])  # Par PRR\ng.process_action(action_helper.get_all_choices()[-1])  # Pass\ng.process_action(action_helper.get_all_choices()[-8])  # Par NYC\ng.process_action(action_helper.get_all_choices()[1])  # Buy PRR\ng.process_action(action_helper.get_all_choices()[1])  # Buy PRR\ng.process_action(action_helper.get_all_choices()[14])  # Par C&O\ng.process_action(action_helper.get_all_choices()[2])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[1])  # Buy PRR\ng.process_action(action_helper.get_all_choices()[1])  # Buy PRR\ng.process_action(action_helper.get_all_choices()[3])  # Buy C&O\ng.process_action(action_helper.get_all_choices()[2])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[0])  # Buy PRR\ng.process_action(action_helper.get_all_choices()[1])  # Buy PRR\ng.process_action(action_helper.get_all_choices()[3])  # Buy C&O\ng.process_action(action_helper.get_all_choices()[2])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[1])  # Buy PRR\ng.process_action(action_helper.get_all_choices()[2])  # Buy C&O\ng.process_action(action_helper.get_all_choices()[1])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[1])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[2])  # Buy C&O\ng.process_action(action_helper.get_all_choices()[1])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[1])  # Buy NYC\n# Player 1: 60% PRR, 20% NYC\n# Player 2: 60% C&O, 10% NYC\n# Player 3: 60% NYC\n# Player 4: 40% PRR, 20% B&O\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\ng.log\n\n[&lt;Entry message='-- Phase 2 (Operating Rounds: 1 | Train Limit: 4 | Available Tiles: Yellow)', action_id=0&gt;,\n &lt;Entry message='adding share &lt;Share: PRR 10%&gt; for id PRR_1 to ability &lt;rl18xx.game.engine.abilities.Shares object&gt;', action_id=0&gt;,\n &lt;Entry message='setting &lt;rl18xx.game.engine.abilities.Shares object&gt;'s shares to [&lt;Share: PRR 10%&gt;]', action_id=0&gt;,\n &lt;Entry message='adding share &lt;Share: B&O 20%&gt; for id B&O_0 to ability &lt;rl18xx.game.engine.abilities.Shares object&gt;', action_id=0&gt;,\n &lt;Entry message='setting &lt;rl18xx.game.engine.abilities.Shares object&gt;'s shares to [&lt;Share: B&O 20%&gt;]', action_id=0&gt;,\n &lt;Entry message='Player 1 passes bidding', action_id=1&gt;,\n &lt;Entry message='Player 2 bids $45 for Champlain & St.Lawrence', action_id=2&gt;,\n &lt;Entry message='Player 3 bids $50 for Champlain & St.Lawrence', action_id=3&gt;,\n &lt;Entry message='Player 4 bids $225 for Baltimore & Ohio', action_id=4&gt;,\n &lt;Entry message='Player 1 buys Schuylkill Valley for $20', action_id=5&gt;,\n &lt;Entry message='Champlain & St.Lawrence goes up for auction', action_id=5&gt;,\n &lt;Entry message='Player 2 passes on Champlain & St.Lawrence', action_id=6&gt;,\n &lt;Entry message='Player 3 wins the auction for Champlain & St.Lawrence with a bid of $50', action_id=6&gt;,\n &lt;Entry message='Player 2 buys Delaware & Hudson for $70', action_id=7&gt;,\n &lt;Entry message='Player 3 buys Mohawk & Hudson for $110', action_id=8&gt;,\n &lt;Entry message='Player 4 buys Camden & Amboy for $160', action_id=9&gt;,\n &lt;Entry message='Player 4 receives a 10% share of PRR', action_id=9&gt;,\n &lt;Entry message='Player 4 wins the auction for Baltimore & Ohio with the only bid of $225', action_id=9&gt;,\n &lt;Entry message='Player 4 pars B&O at $100', action_id=10&gt;,\n &lt;Entry message='Player 4 receives a 20% share of B&O', action_id=10&gt;,\n &lt;Entry message='Player 4 becomes the president of B&O', action_id=10&gt;,\n &lt;Entry message='Player 1 has priority deal', action_id=10&gt;,\n &lt;Entry message='-- Stock Round 1 --', action_id=10&gt;,\n &lt;Entry message='Player 1 pars PRR at $67', action_id=11&gt;,\n &lt;Entry message='Player 1 buys a 20% share of PRR from the IPO for $134', action_id=11&gt;,\n &lt;Entry message='Player 1 becomes the president of PRR', action_id=11&gt;,\n &lt;Entry message='Player 2 passes', action_id=12&gt;,\n &lt;Entry message='Player 3 pars NYC at $67', action_id=13&gt;,\n &lt;Entry message='Player 3 buys a 20% share of NYC from the IPO for $134', action_id=13&gt;,\n &lt;Entry message='Player 3 becomes the president of NYC', action_id=13&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=14&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=15&gt;,\n &lt;Entry message='Player 2 pars C&O at $67', action_id=16&gt;,\n &lt;Entry message='Player 2 buys a 20% share of C&O from the IPO for $134', action_id=16&gt;,\n &lt;Entry message='Player 2 becomes the president of C&O', action_id=16&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=17&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=18&gt;,\n &lt;Entry message='PRR floats', action_id=18&gt;,\n &lt;Entry message='PRR receives $670.0', action_id=18&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=19&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=20&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=21&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=22&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=23&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=24&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=25&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=25&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=26&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=27&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=28&gt;,\n &lt;Entry message='NYC floats', action_id=28&gt;,\n &lt;Entry message='NYC receives $670.0', action_id=28&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=28&gt;,\n &lt;Entry message='Player 1 buys a 10% share of NYC from the IPO for $67', action_id=29&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=30&gt;,\n &lt;Entry message='C&O floats', action_id=30&gt;,\n &lt;Entry message='C&O receives $670.0', action_id=30&gt;,\n &lt;Entry message='Player 3 has no valid actions and passes', action_id=30&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=30&gt;,\n &lt;Entry message='Player 1 buys a 10% share of NYC from the IPO for $67', action_id=31&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYC from the IPO for $67', action_id=32&gt;,\n &lt;Entry message='Player 3 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 1 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 2 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='PRR's share price moves up from $67 to $71', action_id=32&gt;,\n &lt;Entry message='Player 3 has priority deal', action_id=32&gt;,\n &lt;Entry message='-- Operating Round 1.1 (of 1) --', action_id=32&gt;,\n &lt;Entry message='Player 3 collects $10 from Champlain & St.Lawrence', action_id=32&gt;,\n &lt;Entry message='Player 3 collects $20 from Mohawk & Hudson', action_id=32&gt;,\n &lt;Entry message='Player 4 collects $25 from Camden & Amboy', action_id=32&gt;,\n &lt;Entry message='Player 4 collects $30 from Baltimore & Ohio', action_id=32&gt;,\n &lt;Entry message='Player 1 collects $5 from Schuylkill Valley', action_id=32&gt;,\n &lt;Entry message='Player 2 collects $15 from Delaware & Hudson', action_id=32&gt;,\n &lt;Entry message='Player 1 operates PRR', action_id=32&gt;,\n &lt;Entry message='PRR places a token on H12', action_id=32&gt;]\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#operating-round-1",
    "href": "game/game_test.html#operating-round-1",
    "title": "Game Test",
    "section": "Operating Round 1",
    "text": "Operating Round 1\n\n# PRR\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # lays tile #57 with rotation 1 on H10\ng.process_action(action_helper.get_all_choices()[-1])  # passes place token\ng.process_action(action_helper.get_all_choices()[0])  # buys a 2 train\ng.process_action(action_helper.get_all_choices()[0])  # buys a 2 train\ng.process_action(action_helper.get_all_choices()[-1])  # passes trains\n\n# NYC\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # lays tile #57 with rotation 0 on E19\ng.process_action(action_helper.get_all_choices()[0])  # buys a 2 train\ng.process_action(action_helper.get_all_choices()[-1])  # passes trains\n\n# C&O\ng.process_action(action_helper.get_all_choices()[-5])\ng.process_action(action_helper.get_all_choices()[0])\ng.process_action(action_helper.get_all_choices()[-1])\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\ng.log\n\n[&lt;Entry message='-- Phase 2 (Operating Rounds: 1 | Train Limit: 4 | Available Tiles: Yellow)', action_id=0&gt;,\n &lt;Entry message='adding share &lt;Share: PRR 10%&gt; for id PRR_1 to ability &lt;rl18xx.game.engine.abilities.Shares object&gt;', action_id=0&gt;,\n &lt;Entry message='setting &lt;rl18xx.game.engine.abilities.Shares object&gt;'s shares to [&lt;Share: PRR 10%&gt;]', action_id=0&gt;,\n &lt;Entry message='adding share &lt;Share: B&O 20%&gt; for id B&O_0 to ability &lt;rl18xx.game.engine.abilities.Shares object&gt;', action_id=0&gt;,\n &lt;Entry message='setting &lt;rl18xx.game.engine.abilities.Shares object&gt;'s shares to [&lt;Share: B&O 20%&gt;]', action_id=0&gt;,\n &lt;Entry message='Player 1 passes bidding', action_id=1&gt;,\n &lt;Entry message='Player 2 bids $45 for Champlain & St.Lawrence', action_id=2&gt;,\n &lt;Entry message='Player 3 bids $50 for Champlain & St.Lawrence', action_id=3&gt;,\n &lt;Entry message='Player 4 bids $225 for Baltimore & Ohio', action_id=4&gt;,\n &lt;Entry message='Player 1 buys Schuylkill Valley for $20', action_id=5&gt;,\n &lt;Entry message='Champlain & St.Lawrence goes up for auction', action_id=5&gt;,\n &lt;Entry message='Player 2 passes on Champlain & St.Lawrence', action_id=6&gt;,\n &lt;Entry message='Player 3 wins the auction for Champlain & St.Lawrence with a bid of $50', action_id=6&gt;,\n &lt;Entry message='Player 2 buys Delaware & Hudson for $70', action_id=7&gt;,\n &lt;Entry message='Player 3 buys Mohawk & Hudson for $110', action_id=8&gt;,\n &lt;Entry message='Player 4 buys Camden & Amboy for $160', action_id=9&gt;,\n &lt;Entry message='Player 4 receives a 10% share of PRR', action_id=9&gt;,\n &lt;Entry message='Player 4 wins the auction for Baltimore & Ohio with the only bid of $225', action_id=9&gt;,\n &lt;Entry message='Player 4 pars B&O at $100', action_id=10&gt;,\n &lt;Entry message='Player 4 receives a 20% share of B&O', action_id=10&gt;,\n &lt;Entry message='Player 4 becomes the president of B&O', action_id=10&gt;,\n &lt;Entry message='Player 1 has priority deal', action_id=10&gt;,\n &lt;Entry message='-- Stock Round 1 --', action_id=10&gt;,\n &lt;Entry message='Player 1 pars PRR at $67', action_id=11&gt;,\n &lt;Entry message='Player 1 buys a 20% share of PRR from the IPO for $134', action_id=11&gt;,\n &lt;Entry message='Player 1 becomes the president of PRR', action_id=11&gt;,\n &lt;Entry message='Player 2 passes', action_id=12&gt;,\n &lt;Entry message='Player 3 pars NYC at $67', action_id=13&gt;,\n &lt;Entry message='Player 3 buys a 20% share of NYC from the IPO for $134', action_id=13&gt;,\n &lt;Entry message='Player 3 becomes the president of NYC', action_id=13&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=14&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=15&gt;,\n &lt;Entry message='Player 2 pars C&O at $67', action_id=16&gt;,\n &lt;Entry message='Player 2 buys a 20% share of C&O from the IPO for $134', action_id=16&gt;,\n &lt;Entry message='Player 2 becomes the president of C&O', action_id=16&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=17&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=18&gt;,\n &lt;Entry message='PRR floats', action_id=18&gt;,\n &lt;Entry message='PRR receives $670.0', action_id=18&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=19&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=20&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=21&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=22&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=23&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=24&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=25&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=25&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=26&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=27&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=28&gt;,\n &lt;Entry message='NYC floats', action_id=28&gt;,\n &lt;Entry message='NYC receives $670.0', action_id=28&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=28&gt;,\n &lt;Entry message='Player 1 buys a 10% share of NYC from the IPO for $67', action_id=29&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=30&gt;,\n &lt;Entry message='C&O floats', action_id=30&gt;,\n &lt;Entry message='C&O receives $670.0', action_id=30&gt;,\n &lt;Entry message='Player 3 has no valid actions and passes', action_id=30&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=30&gt;,\n &lt;Entry message='Player 1 buys a 10% share of NYC from the IPO for $67', action_id=31&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYC from the IPO for $67', action_id=32&gt;,\n &lt;Entry message='Player 3 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 1 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 2 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='PRR's share price moves up from $67 to $71', action_id=32&gt;,\n &lt;Entry message='Player 3 has priority deal', action_id=32&gt;,\n &lt;Entry message='-- Operating Round 1.1 (of 1) --', action_id=32&gt;,\n &lt;Entry message='Player 3 collects $10 from Champlain & St.Lawrence', action_id=32&gt;,\n &lt;Entry message='Player 3 collects $20 from Mohawk & Hudson', action_id=32&gt;,\n &lt;Entry message='Player 4 collects $25 from Camden & Amboy', action_id=32&gt;,\n &lt;Entry message='Player 4 collects $30 from Baltimore & Ohio', action_id=32&gt;,\n &lt;Entry message='Player 1 collects $5 from Schuylkill Valley', action_id=32&gt;,\n &lt;Entry message='Player 2 collects $15 from Delaware & Hudson', action_id=32&gt;,\n &lt;Entry message='Player 1 operates PRR', action_id=32&gt;,\n &lt;Entry message='PRR places a token on H12', action_id=32&gt;,\n &lt;Entry message='PRR lays tile #57 with rotation 1 on H10 (Pittsburgh)', action_id=33&gt;,\n &lt;Entry message='PRR passes place a token', action_id=34&gt;,\n &lt;Entry message='PRR skips run routes', action_id=34&gt;,\n &lt;Entry message='PRR does not run', action_id=34&gt;,\n &lt;Entry message='PRR's share price moves left from $71 to $67', action_id=34&gt;,\n &lt;Entry message='PRR buys a 2 train for $80 from The Depot', action_id=35&gt;,\n &lt;Entry message='PRR buys a 2 train for $80 from The Depot', action_id=36&gt;,\n &lt;Entry message='PRR passes buy trains', action_id=37&gt;,\n &lt;Entry message='PRR skips buy companies', action_id=37&gt;,\n &lt;Entry message='Player 3 operates NYC', action_id=37&gt;,\n &lt;Entry message='NYC places a token on E19', action_id=37&gt;,\n &lt;Entry message='NYC lays tile #57 with rotation 0 on E19 (Albany)', action_id=38&gt;,\n &lt;Entry message='NYC skips place a token', action_id=38&gt;,\n &lt;Entry message='NYC skips run routes', action_id=38&gt;,\n &lt;Entry message='NYC does not run', action_id=38&gt;,\n &lt;Entry message='NYC's share price moves left from $67 to $65', action_id=38&gt;,\n &lt;Entry message='NYC buys a 2 train for $80 from The Depot', action_id=39&gt;,\n &lt;Entry message='NYC passes buy trains', action_id=40&gt;,\n &lt;Entry message='NYC skips buy companies', action_id=40&gt;,\n &lt;Entry message='Player 2 operates C&O', action_id=40&gt;,\n &lt;Entry message='C&O places a token on F6', action_id=40&gt;,\n &lt;Entry message='C&O lays tile #8 with rotation 1 on G5', action_id=41&gt;,\n &lt;Entry message='C&O skips place a token', action_id=41&gt;,\n &lt;Entry message='C&O skips run routes', action_id=41&gt;,\n &lt;Entry message='C&O does not run', action_id=41&gt;,\n &lt;Entry message='C&O's share price moves left from $67 to $65', action_id=41&gt;,\n &lt;Entry message='C&O buys a 2 train for $80 from The Depot', action_id=42&gt;,\n &lt;Entry message='C&O passes buy trains', action_id=43&gt;,\n &lt;Entry message='C&O skips buy companies', action_id=43&gt;,\n &lt;Entry message='-- Stock Round 2 --', action_id=43&gt;]\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#stock-round-2",
    "href": "game/game_test.html#stock-round-2",
    "title": "Game Test",
    "section": "Stock Round 2",
    "text": "Stock Round 2\n\ng.process_action(action_helper.get_all_choices()[-2])  # sell nyc\ng.process_action(action_helper.get_all_choices()[-3])  # par nynh\n\ng.process_action(action_helper.get_all_choices()[0])  # buy C&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[0])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[0])  # Buy NYNH\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[1])  # Buy NYNH\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[1])  # Buy NYNH\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[1])  # Buy NYNH\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n# Player 1: 60% PRR, 30% NYC\n# Player 2: 60% C&O, 10% NYC, 10% NYNH\n# Player 3: 50% NYNH, 10% NYC\n# Player 4: 40% PRR, 20% B&O, 10% C&O\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#operating-round-2",
    "href": "game/game_test.html#operating-round-2",
    "title": "Game Test",
    "section": "Operating Round 2",
    "text": "Operating Round 2\n\n# NYNH\ng.process_action(action_helper.get_all_choices()[0])  # lay #1 with rotation 0 on F20\ng.process_action(action_helper.get_all_choices()[0])  # buy 2 train\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\n\n# PRR\ng.process_action(\n    action_helper.get_all_choices()[4]\n)  # lay tile #9 with rotation 1 on H8\ng.process_action(action_helper.get_all_choices()[-1])  # pass token\ng.process_action(action_helper.get_all_choices()[0])  # auto trains & run\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\n\n# C&O\ng.process_action(\n    action_helper.get_all_choices()[-3]\n)  # lay tile #8 with rotation 2 on G3\ng.process_action(action_helper.get_all_choices()[0])  # auto trains & run\ng.process_action(action_helper.get_all_choices()[1])  # withhold\ng.process_action(action_helper.get_all_choices()[0])  # buy a 2 train\ng.process_action(action_helper.get_all_choices()[0])  # buy a 3 train\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(action_helper.get_all_choices()[-2])  # buy DH from Player 2 for $140\ng.process_action(action_helper.get_all_choices()[0])  # pass buy companies\n\n# NYC\ng.process_action(\n    action_helper.get_all_choices()[-10]\n)  # lay tile #8 with rotation 3 on F18\ng.process_action(action_helper.get_all_choices()[31])  # buy 3 train\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(\n    action_helper.get_all_choices()[-2]\n)  # buys Schuylkill Valley from Player 1 for $40\ng.process_action(action_helper.get_all_choices()[-1])  # pass buy companies\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#stock-round-3",
    "href": "game/game_test.html#stock-round-3",
    "title": "Game Test",
    "section": "Stock Round 3",
    "text": "Stock Round 3\n\ng.process_action(action_helper.get_all_choices()[2])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[-1])  # Pass Sell\n\ng.process_action(action_helper.get_all_choices()[3])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[-1])  # Pass Sell\n\ng.process_action(action_helper.get_all_choices()[3])  # Buy NYC\ng.process_action(action_helper.get_all_choices()[-1])  # Pass Sell\n\ng.process_action(action_helper.get_all_choices()[3])  # Exchange for NYC\ng.process_action(action_helper.get_all_choices()[1])  # Buy last NYC\ng.process_action(action_helper.get_all_choices()[-1])  # Pass sell\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[1])  # Buy NYNH\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#operating-round-3",
    "href": "game/game_test.html#operating-round-3",
    "title": "Game Test",
    "section": "Operating Round 3",
    "text": "Operating Round 3\n\n# PRR\ng.process_action(\n    action_helper.get_all_choices()[-11]\n)  # lay tile 8 with rotation 2 on H6\ng.process_action(action_helper.get_all_choices()[0])  # Token Pittsburgh\ng.process_action(action_helper.get_all_choices()[0])  # Run 2 train for 30\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n# NYNH\ng.process_action(action_helper.get_all_choices()[-5])  # Buy C&S\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # lay tile 54 with rotation 0 on G19\ng.process_action(action_helper.get_all_choices()[-1])  # run routes\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[0])  # buy 3 train\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(action_helper.get_all_choices()[-4])  # lay C&S tile\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n# C&O\ng.process_action(\n    action_helper.get_all_choices()[-6]\n)  # Lay tile 57 with rotation 1 on F16\ng.process_action(action_helper.get_all_choices()[0])  # Token teleport\ng.process_action(action_helper.get_all_choices()[0])  # run routes\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n# NYC\ng.process_action(\n    action_helper.get_all_choices()[8]\n)  # lay tile 19 with rotation 1 on F18\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n# PRR\ng.process_action(\n    action_helper.get_all_choices()[-3]\n)  # lay tile 25 with rotation 1 on g5\ng.process_action(action_helper.get_all_choices()[0])  # run routes\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n# NYNH\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # lay tile 14 with rotation 0 on E19\ng.process_action(action_helper.get_all_choices()[0])  # place a token on E19\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n# C&O\ng.process_action(\n    action_helper.get_all_choices()[5]\n)  # lay tile 15 with rotation 4 on F16\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n# NYC\ng.process_action(\n    action_helper.get_all_choices()[-7]\n)  # lay tile #7 with rotation 0 on E21\ng.process_action(action_helper.get_all_choices()[0])  # place token on F16\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#stock-round-4",
    "href": "game/game_test.html#stock-round-4",
    "title": "Game Test",
    "section": "Stock Round 4",
    "text": "Stock Round 4\n\ng.process_action(action_helper.get_all_choices()[0])  # buy B&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[0])  # buy B&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[2])  # buy C&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[1])  # buy NYNH\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[0])  # buy B&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[0])  # buy B&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[2])  # buy C&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[1])  # buy NYNH\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[0])  # buy B&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\ng.process_action(action_helper.get_all_choices()[1])  # buy C&O\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[1])  # buy NYNH\ng.process_action(action_helper.get_all_choices()[-1])  # pass sell\n\ng.process_action(action_helper.get_all_choices()[-1])  # pass\ng.process_action(action_helper.get_all_choices()[-1])  # pass\ng.process_action(action_helper.get_all_choices()[-1])  # pass\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#operating-round-4",
    "href": "game/game_test.html#operating-round-4",
    "title": "Game Test",
    "section": "Operating Round 4",
    "text": "Operating Round 4\n\n# PRR\ng.process_action(\n    action_helper.get_all_choices()[9]\n)  # lay tile #8 with rotation 5 on H14\ng.process_action(action_helper.get_all_choices()[0])  # Run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[0])  # buy 3 train\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\ng.process_action(action_helper.get_all_choices()[-1])  # pass companies\n\n# B&O\ng.process_action(action_helper.get_all_choices()[-12])  # buy C&A for max\ng.process_action(\n    action_helper.get_all_choices()[5]\n)  # lay tile #8 with rotation 1 on I17\ng.process_action(action_helper.get_all_choices()[0])  # buy 3 train\ng.process_action(action_helper.get_all_choices()[0])  # buy 4 train\n\n# NYNH\ng.process_action(\n    action_helper.get_all_choices()[-3]\n)  # lay tile #57 with rotation 1 on F22\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\n\n# C&O\ng.process_action(\n    action_helper.get_all_choices()[-20]\n)  # lay tile #56 with rotation 1 on G17\ng.process_action(action_helper.get_all_choices()[0])  # place token on G19\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\n\n# NYC\ng.process_action(\n    action_helper.get_all_choices()[13]\n)  # lay tile #26 with rotation 1 on E21\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(\n    action_helper.get_all_choices()[109]\n)  # buy a 3 train for $110 from PRR\n\n# PRR\ng.process_action(\n    action_helper.get_all_choices()[12]\n)  # lay tile #53 with rotation 0 on I15\ng.process_action(action_helper.get_all_choices()[0])  # buy 4 train\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\n\n# NYNH\ng.process_action(action_helper.get_all_choices()[12])  # tile #53 with rotation 1 on E23\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # runs a 3 train for $140: G19-E19-E23\ng.process_action(action_helper.get_all_choices()[1])  # withholds $140\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # buys a 4 train for $300 from The Depot\n\n# B&O\ng.process_action(\n    action_helper.get_all_choices()[-2]\n)  # lay tile #59 with rotation 0 on H18\ng.process_action(action_helper.get_all_choices()[-1])  # skip token\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\n\n\n# C&O\ng.process_action(\n    action_helper.get_all_choices()[8]\n)  # lay tile #69 with rotation 0 on G7\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\n\n# NYC\ng.process_action(\n    action_helper.get_all_choices()[-3]\n)  # lay tile 9 with rotation 1 on F14\ng.process_action(action_helper.get_all_choices()[-1])  # skip token\ng.process_action(action_helper.get_all_choices()[0])  # run trains\ng.process_action(action_helper.get_all_choices()[0])  # pay out\ng.process_action(action_helper.get_all_choices()[-1])  # pass trains\n\ng.log\n\n[&lt;Entry message='-- Phase 2 (Operating Rounds: 1 | Train Limit: 4 | Available Tiles: Yellow)', action_id=0&gt;,\n &lt;Entry message='adding share &lt;Share: PRR 10%&gt; for id PRR_1 to ability &lt;rl18xx.game.engine.abilities.Shares object&gt;', action_id=0&gt;,\n &lt;Entry message='setting &lt;rl18xx.game.engine.abilities.Shares object&gt;'s shares to [&lt;Share: PRR 10%&gt;]', action_id=0&gt;,\n &lt;Entry message='adding share &lt;Share: B&O 20%&gt; for id B&O_0 to ability &lt;rl18xx.game.engine.abilities.Shares object&gt;', action_id=0&gt;,\n &lt;Entry message='setting &lt;rl18xx.game.engine.abilities.Shares object&gt;'s shares to [&lt;Share: B&O 20%&gt;]', action_id=0&gt;,\n &lt;Entry message='Player 1 passes bidding', action_id=1&gt;,\n &lt;Entry message='Player 2 bids $45 for Champlain & St.Lawrence', action_id=2&gt;,\n &lt;Entry message='Player 3 bids $50 for Champlain & St.Lawrence', action_id=3&gt;,\n &lt;Entry message='Player 4 bids $225 for Baltimore & Ohio', action_id=4&gt;,\n &lt;Entry message='Player 1 buys Schuylkill Valley for $20', action_id=5&gt;,\n &lt;Entry message='Champlain & St.Lawrence goes up for auction', action_id=5&gt;,\n &lt;Entry message='Player 2 passes on Champlain & St.Lawrence', action_id=6&gt;,\n &lt;Entry message='Player 3 wins the auction for Champlain & St.Lawrence with a bid of $50', action_id=6&gt;,\n &lt;Entry message='Player 2 buys Delaware & Hudson for $70', action_id=7&gt;,\n &lt;Entry message='Player 3 buys Mohawk & Hudson for $110', action_id=8&gt;,\n &lt;Entry message='Player 4 buys Camden & Amboy for $160', action_id=9&gt;,\n &lt;Entry message='Player 4 receives a 10% share of PRR', action_id=9&gt;,\n &lt;Entry message='Player 4 wins the auction for Baltimore & Ohio with the only bid of $225', action_id=9&gt;,\n &lt;Entry message='Player 4 pars B&O at $100', action_id=10&gt;,\n &lt;Entry message='Player 4 receives a 20% share of B&O', action_id=10&gt;,\n &lt;Entry message='Player 4 becomes the president of B&O', action_id=10&gt;,\n &lt;Entry message='Player 1 has priority deal', action_id=10&gt;,\n &lt;Entry message='-- Stock Round 1 --', action_id=10&gt;,\n &lt;Entry message='Player 1 pars PRR at $67', action_id=11&gt;,\n &lt;Entry message='Player 1 buys a 20% share of PRR from the IPO for $134', action_id=11&gt;,\n &lt;Entry message='Player 1 becomes the president of PRR', action_id=11&gt;,\n &lt;Entry message='Player 2 passes', action_id=12&gt;,\n &lt;Entry message='Player 3 pars NYC at $67', action_id=13&gt;,\n &lt;Entry message='Player 3 buys a 20% share of NYC from the IPO for $134', action_id=13&gt;,\n &lt;Entry message='Player 3 becomes the president of NYC', action_id=13&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=14&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=15&gt;,\n &lt;Entry message='Player 2 pars C&O at $67', action_id=16&gt;,\n &lt;Entry message='Player 2 buys a 20% share of C&O from the IPO for $134', action_id=16&gt;,\n &lt;Entry message='Player 2 becomes the president of C&O', action_id=16&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=17&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=18&gt;,\n &lt;Entry message='PRR floats', action_id=18&gt;,\n &lt;Entry message='PRR receives $670.0', action_id=18&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=19&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=20&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=21&gt;,\n &lt;Entry message='Player 4 buys a 10% share of PRR from the IPO for $67', action_id=22&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=23&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=24&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=25&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=25&gt;,\n &lt;Entry message='Player 1 buys a 10% share of PRR from the IPO for $67', action_id=26&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=27&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the IPO for $67', action_id=28&gt;,\n &lt;Entry message='NYC floats', action_id=28&gt;,\n &lt;Entry message='NYC receives $670.0', action_id=28&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=28&gt;,\n &lt;Entry message='Player 1 buys a 10% share of NYC from the IPO for $67', action_id=29&gt;,\n &lt;Entry message='Player 2 buys a 10% share of C&O from the IPO for $67', action_id=30&gt;,\n &lt;Entry message='C&O floats', action_id=30&gt;,\n &lt;Entry message='C&O receives $670.0', action_id=30&gt;,\n &lt;Entry message='Player 3 has no valid actions and passes', action_id=30&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=30&gt;,\n &lt;Entry message='Player 1 buys a 10% share of NYC from the IPO for $67', action_id=31&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYC from the IPO for $67', action_id=32&gt;,\n &lt;Entry message='Player 3 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 4 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 1 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='Player 2 has no valid actions and passes', action_id=32&gt;,\n &lt;Entry message='PRR's share price moves up from $67 to $71', action_id=32&gt;,\n &lt;Entry message='Player 3 has priority deal', action_id=32&gt;,\n &lt;Entry message='-- Operating Round 1.1 (of 1) --', action_id=32&gt;,\n &lt;Entry message='Player 3 collects $10 from Champlain & St.Lawrence', action_id=32&gt;,\n &lt;Entry message='Player 3 collects $20 from Mohawk & Hudson', action_id=32&gt;,\n &lt;Entry message='Player 4 collects $25 from Camden & Amboy', action_id=32&gt;,\n &lt;Entry message='Player 4 collects $30 from Baltimore & Ohio', action_id=32&gt;,\n &lt;Entry message='Player 1 collects $5 from Schuylkill Valley', action_id=32&gt;,\n &lt;Entry message='Player 2 collects $15 from Delaware & Hudson', action_id=32&gt;,\n &lt;Entry message='Player 1 operates PRR', action_id=32&gt;,\n &lt;Entry message='PRR places a token on H12', action_id=32&gt;,\n &lt;Entry message='PRR lays tile #57 with rotation 1 on H10 (Pittsburgh)', action_id=33&gt;,\n &lt;Entry message='PRR passes place a token', action_id=34&gt;,\n &lt;Entry message='PRR skips run routes', action_id=34&gt;,\n &lt;Entry message='PRR does not run', action_id=34&gt;,\n &lt;Entry message='PRR's share price moves left from $71 to $67', action_id=34&gt;,\n &lt;Entry message='PRR buys a 2 train for $80 from The Depot', action_id=35&gt;,\n &lt;Entry message='PRR buys a 2 train for $80 from The Depot', action_id=36&gt;,\n &lt;Entry message='PRR passes buy trains', action_id=37&gt;,\n &lt;Entry message='PRR skips buy companies', action_id=37&gt;,\n &lt;Entry message='Player 3 operates NYC', action_id=37&gt;,\n &lt;Entry message='NYC places a token on E19', action_id=37&gt;,\n &lt;Entry message='NYC lays tile #57 with rotation 0 on E19 (Albany)', action_id=38&gt;,\n &lt;Entry message='NYC skips place a token', action_id=38&gt;,\n &lt;Entry message='NYC skips run routes', action_id=38&gt;,\n &lt;Entry message='NYC does not run', action_id=38&gt;,\n &lt;Entry message='NYC's share price moves left from $67 to $65', action_id=38&gt;,\n &lt;Entry message='NYC buys a 2 train for $80 from The Depot', action_id=39&gt;,\n &lt;Entry message='NYC passes buy trains', action_id=40&gt;,\n &lt;Entry message='NYC skips buy companies', action_id=40&gt;,\n &lt;Entry message='Player 2 operates C&O', action_id=40&gt;,\n &lt;Entry message='C&O places a token on F6', action_id=40&gt;,\n &lt;Entry message='C&O lays tile #8 with rotation 1 on G5', action_id=41&gt;,\n &lt;Entry message='C&O skips place a token', action_id=41&gt;,\n &lt;Entry message='C&O skips run routes', action_id=41&gt;,\n &lt;Entry message='C&O does not run', action_id=41&gt;,\n &lt;Entry message='C&O's share price moves left from $67 to $65', action_id=41&gt;,\n &lt;Entry message='C&O buys a 2 train for $80 from The Depot', action_id=42&gt;,\n &lt;Entry message='C&O passes buy trains', action_id=43&gt;,\n &lt;Entry message='C&O skips buy companies', action_id=43&gt;,\n &lt;Entry message='-- Stock Round 2 --', action_id=43&gt;,\n &lt;Entry message='Player 3 sells 5 shares of NYC and receives $325', action_id=44&gt;,\n &lt;Entry message='Player 1 becomes the president of NYC', action_id=44&gt;,\n &lt;Entry message='NYC's share price moves down from $65 to $30', action_id=44&gt;,\n &lt;Entry message='Player 3 pars NYNH at $71', action_id=45&gt;,\n &lt;Entry message='Player 3 buys a 20% share of NYNH from the IPO for $142', action_id=45&gt;,\n &lt;Entry message='Player 3 becomes the president of NYNH', action_id=45&gt;,\n &lt;Entry message='Player 4 buys a 10% share of C&O from the IPO for $67', action_id=46&gt;,\n &lt;Entry message='Player 4 declines to sell shares', action_id=47&gt;,\n &lt;Entry message='Player 1 buys a 10% share of NYC from the market for $30', action_id=48&gt;,\n &lt;Entry message='Player 1 declines to sell shares', action_id=49&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYNH from the IPO for $71', action_id=50&gt;,\n &lt;Entry message='Player 2 declines to sell shares', action_id=51&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYNH from the IPO for $71', action_id=52&gt;,\n &lt;Entry message='Player 3 declines to sell shares', action_id=53&gt;,\n &lt;Entry message='Player 4 passes', action_id=54&gt;,\n &lt;Entry message='Player 1 passes', action_id=55&gt;,\n &lt;Entry message='Player 2 passes', action_id=56&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYNH from the IPO for $71', action_id=57&gt;,\n &lt;Entry message='Player 3 declines to sell shares', action_id=58&gt;,\n &lt;Entry message='Player 4 passes', action_id=59&gt;,\n &lt;Entry message='Player 1 passes', action_id=60&gt;,\n &lt;Entry message='Player 2 passes', action_id=61&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYNH from the IPO for $71', action_id=62&gt;,\n &lt;Entry message='NYNH floats', action_id=62&gt;,\n &lt;Entry message='NYNH receives $710.0', action_id=62&gt;,\n &lt;Entry message='Player 3 declines to sell shares', action_id=63&gt;,\n &lt;Entry message='Player 4 passes', action_id=64&gt;,\n &lt;Entry message='Player 1 passes', action_id=65&gt;,\n &lt;Entry message='Player 2 passes', action_id=66&gt;,\n &lt;Entry message='Player 3 passes', action_id=67&gt;,\n &lt;Entry message='PRR's share price moves up from $67 to $71', action_id=67&gt;,\n &lt;Entry message='Player 4 has priority deal', action_id=67&gt;,\n &lt;Entry message='-- Operating Round 2.1 (of 1) --', action_id=67&gt;,\n &lt;Entry message='Player 4 collects $25 from Camden & Amboy', action_id=67&gt;,\n &lt;Entry message='Player 4 collects $30 from Baltimore & Ohio', action_id=67&gt;,\n &lt;Entry message='Player 1 collects $5 from Schuylkill Valley', action_id=67&gt;,\n &lt;Entry message='Player 2 collects $15 from Delaware & Hudson', action_id=67&gt;,\n &lt;Entry message='Player 3 collects $10 from Champlain & St.Lawrence', action_id=67&gt;,\n &lt;Entry message='Player 3 collects $20 from Mohawk & Hudson', action_id=67&gt;,\n &lt;Entry message='Player 3 operates NYNH', action_id=67&gt;,\n &lt;Entry message='NYNH places a token on G19', action_id=67&gt;,\n &lt;Entry message='NYNH lays tile #1 with rotation 0 on F20 (New Haven & Hartford)', action_id=68&gt;,\n &lt;Entry message='NYNH skips place a token', action_id=68&gt;,\n &lt;Entry message='NYNH skips run routes', action_id=68&gt;,\n &lt;Entry message='NYNH does not run', action_id=68&gt;,\n &lt;Entry message='NYNH's share price moves left from $71 to $67', action_id=68&gt;,\n &lt;Entry message='NYNH buys a 2 train for $80 from The Depot', action_id=69&gt;,\n &lt;Entry message='NYNH passes buy trains', action_id=70&gt;,\n &lt;Entry message='NYNH skips buy companies', action_id=70&gt;,\n &lt;Entry message='Player 1 operates PRR', action_id=70&gt;,\n &lt;Entry message='PRR lays tile #9 with rotation 1 on H8', action_id=71&gt;,\n &lt;Entry message='PRR passes place a token', action_id=72&gt;,\n &lt;Entry message='PRR runs a 2 train for $30: H12-H10', action_id=73&gt;,\n &lt;Entry message='PRR pays out $30 = $3.0 per share ($12 to Player 4, $18 to Player 1)', action_id=74&gt;,\n &lt;Entry message='PRR's share price moves right from $71 to $76', action_id=74&gt;,\n &lt;Entry message='PRR passes buy trains', action_id=75&gt;,\n &lt;Entry message='PRR skips buy companies', action_id=75&gt;,\n &lt;Entry message='Player 2 operates C&O', action_id=75&gt;,\n &lt;Entry message='C&O lays tile #8 with rotation 2 on G3', action_id=76&gt;,\n &lt;Entry message='C&O skips place a token', action_id=76&gt;,\n &lt;Entry message='C&O runs a 2 train for $70: F6-F2', action_id=77&gt;,\n &lt;Entry message='C&O withholds $70', action_id=78&gt;,\n &lt;Entry message='C&O's share price moves left from $65 to $58', action_id=78&gt;,\n &lt;Entry message='C&O buys a 2 train for $80 from The Depot', action_id=79&gt;,\n &lt;Entry message='C&O buys a 3 train for $180 from The Depot', action_id=80&gt;,\n &lt;Entry message='-- Phase 3 (Operating Rounds: 2 | Train Limit: 4 | Available Tiles: Yellow, Green)', action_id=80&gt;,\n &lt;Entry message='C&O passes buy trains', action_id=81&gt;,\n &lt;Entry message='C&O buys Delaware & Hudson from Player 2 for $140', action_id=82&gt;,\n &lt;Entry message='C&O passes buy companies', action_id=83&gt;,\n &lt;Entry message='Player 1 operates NYC', action_id=83&gt;,\n &lt;Entry message='NYC lays tile #8 with rotation 3 on F18', action_id=84&gt;,\n &lt;Entry message='NYC skips place a token', action_id=84&gt;,\n &lt;Entry message='NYC skips run routes', action_id=84&gt;,\n &lt;Entry message='NYC does not run', action_id=84&gt;,\n &lt;Entry message='NYC's share price moves left from $30 to $20', action_id=84&gt;,\n &lt;Entry message='NYC buys a 3 train for $180 from The Depot', action_id=85&gt;,\n &lt;Entry message='NYC passes buy trains', action_id=86&gt;,\n &lt;Entry message='NYC buys Schuylkill Valley from Player 1 for $40', action_id=87&gt;,\n &lt;Entry message='NYC passes buy companies', action_id=88&gt;,\n &lt;Entry message='-- Stock Round 3 --', action_id=88&gt;,\n &lt;Entry message='Player 4 buys a 10% share of NYC from the market for $20', action_id=89&gt;,\n &lt;Entry message='Player 4 declines to sell shares', action_id=90&gt;,\n &lt;Entry message='Player 1 buys a 10% share of NYC from the market for $20', action_id=91&gt;,\n &lt;Entry message='Player 1 declines to sell shares', action_id=92&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYC from the market for $20', action_id=93&gt;,\n &lt;Entry message='Player 2 declines to sell shares', action_id=94&gt;,\n &lt;Entry message='Player 3 exchanges Mohawk & Hudson from the IPO for a 10% share of NYC', action_id=95&gt;,\n &lt;Entry message='Player 3 buys a 10% share of NYC from the market for $20', action_id=96&gt;,\n &lt;Entry message='Player 3 declines to sell shares', action_id=97&gt;,\n &lt;Entry message='Player 4 passes', action_id=98&gt;,\n &lt;Entry message='Player 1 passes', action_id=99&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYNH from the IPO for $71', action_id=100&gt;,\n &lt;Entry message='Player 2 declines to sell shares', action_id=101&gt;,\n &lt;Entry message='Player 3 passes', action_id=102&gt;,\n &lt;Entry message='Player 4 passes', action_id=103&gt;,\n &lt;Entry message='Player 1 passes', action_id=104&gt;,\n &lt;Entry message='Player 2 passes', action_id=105&gt;,\n &lt;Entry message='PRR's share price moves up from $76 to $82', action_id=105&gt;,\n &lt;Entry message='NYC's share price moves up from $20 to $30', action_id=105&gt;,\n &lt;Entry message='Player 3 has priority deal', action_id=105&gt;,\n &lt;Entry message='-- Operating Round 3.1 (of 2) --', action_id=105&gt;,\n &lt;Entry message='Player 3 collects $10 from Champlain & St.Lawrence', action_id=105&gt;,\n &lt;Entry message='Player 4 collects $25 from Camden & Amboy', action_id=105&gt;,\n &lt;Entry message='Player 4 collects $30 from Baltimore & Ohio', action_id=105&gt;,\n &lt;Entry message='C&O collects $15 from Delaware & Hudson', action_id=105&gt;,\n &lt;Entry message='NYC collects $5 from Schuylkill Valley', action_id=105&gt;,\n &lt;Entry message='Player 1 operates PRR', action_id=105&gt;,\n &lt;Entry message='PRR lays tile #8 with rotation 2 on H6', action_id=106&gt;,\n &lt;Entry message='PRR places a token on H10 (Pittsburgh) for $40', action_id=107&gt;,\n &lt;Entry message='PRR runs a 2 train for $30: H10-H12', action_id=108&gt;,\n &lt;Entry message='PRR pays out $30 = $3.0 per share ($12 to Player 4, $18 to Player 1)', action_id=109&gt;,\n &lt;Entry message='PRR's share price moves right from $82 to $90', action_id=109&gt;,\n &lt;Entry message='PRR passes buy trains', action_id=110&gt;,\n &lt;Entry message='PRR passes buy companies', action_id=111&gt;,\n &lt;Entry message='Player 3 operates NYNH', action_id=111&gt;,\n &lt;Entry message='NYNH buys Champlain & St.Lawrence from Player 3 for $80', action_id=112&gt;,\n &lt;Entry message='NYNH spends $80 and lays tile #54 with rotation 0 on G19 (New York & Newark)', action_id=113&gt;,\n &lt;Entry message='NYNH skips place a token', action_id=113&gt;,\n &lt;Entry message='NYNH runs a 2 train for $80: G19-E19', action_id=114&gt;,\n &lt;Entry message='NYNH pays out $80 = $8.0 per share ($40 to Player 3, $16 to Player 2)', action_id=115&gt;,\n &lt;Entry message='NYNH's share price moves right from $67 to $71', action_id=115&gt;,\n &lt;Entry message='NYNH buys a 3 train for $180 from The Depot', action_id=116&gt;,\n &lt;Entry message='NYNH passes buy trains', action_id=117&gt;,\n &lt;Entry message='NYNHCS lays tile #58 with rotation 2 on B20 (Burlington)', action_id=118&gt;,\n &lt;Entry message='NYNH passes buy companies', action_id=119&gt;,\n &lt;Entry message='Player 2 operates C&O', action_id=119&gt;,\n &lt;Entry message='C&ODH spends $120 and lays tile #57 with rotation 1 on F16 (Scranton)', action_id=120&gt;,\n &lt;Entry message='C&O (DH) places a token on F16 (Scranton)', action_id=121&gt;,\n &lt;Entry message='C&O skips lay track', action_id=121&gt;,\n &lt;Entry message='C&O skips place a token', action_id=121&gt;,\n &lt;Entry message='C&O runs a 3 train for $70: F6-F2', action_id=122&gt;,\n &lt;Entry message='C&O pays out $70 = $7.0 per share ($7 to Player 4, $42 to Player 2)', action_id=123&gt;,\n &lt;Entry message='C&O's share price moves right from $58 to $65', action_id=123&gt;,\n &lt;Entry message='C&O skips buy trains', action_id=123&gt;,\n &lt;Entry message='C&O passes buy companies', action_id=124&gt;,\n &lt;Entry message='Player 1 operates NYC', action_id=124&gt;,\n &lt;Entry message='NYC lays tile #19 with rotation 1 on F18', action_id=125&gt;,\n &lt;Entry message='NYC skips place a token', action_id=125&gt;,\n &lt;Entry message='NYC runs a 3 train for $80: G19-E19', action_id=126&gt;,\n &lt;Entry message='NYC pays out $80 = $8.0 per share ($24 to Player 3, $8 to Player 4, $32 to Player 1, $16 to Player 2)', action_id=127&gt;,\n &lt;Entry message='NYC's share price moves right from $30 to $40', action_id=127&gt;,\n &lt;Entry message='NYC passes buy trains', action_id=128&gt;,\n &lt;Entry message='NYC passes buy companies', action_id=129&gt;,\n &lt;Entry message='-- Operating Round 3.2 (of 2) --', action_id=129&gt;,\n &lt;Entry message='Player 4 collects $25 from Camden & Amboy', action_id=129&gt;,\n &lt;Entry message='Player 4 collects $30 from Baltimore & Ohio', action_id=129&gt;,\n &lt;Entry message='NYNH collects $10 from Champlain & St.Lawrence', action_id=129&gt;,\n &lt;Entry message='C&O collects $15 from Delaware & Hudson', action_id=129&gt;,\n &lt;Entry message='NYC collects $5 from Schuylkill Valley', action_id=129&gt;,\n &lt;Entry message='Player 1 operates PRR', action_id=129&gt;,\n &lt;Entry message='PRR lays tile #25 with rotation 1 on G5', action_id=130&gt;,\n &lt;Entry message='PRR skips place a token', action_id=130&gt;,\n &lt;Entry message='PRR runs a 2 train for $60: H10-F2', action_id=131&gt;,\n &lt;Entry message='PRR runs a 2 train for $30: H10-H12', action_id=131&gt;,\n &lt;Entry message='PRR pays out $90 = $9.0 per share ($36 to Player 4, $54 to Player 1)', action_id=132&gt;,\n &lt;Entry message='PRR's share price moves right from $90 to $100', action_id=132&gt;,\n &lt;Entry message='PRR passes buy trains', action_id=133&gt;,\n &lt;Entry message='PRR passes buy companies', action_id=134&gt;,\n &lt;Entry message='Player 3 operates NYNH', action_id=134&gt;,\n &lt;Entry message='NYNH lays tile #14 with rotation 0 on E19 (Albany)', action_id=135&gt;,\n &lt;Entry message='NYNH places a token on E19 (Albany) for $40', action_id=136&gt;,\n &lt;Entry message='NYNH runs a 3 train for $90: G19-E19', action_id=137&gt;,\n &lt;Entry message='NYNH runs a 2 train for $70: G19-F20', action_id=137&gt;,\n &lt;Entry message='NYNH pays out $160 = $16.0 per share ($80 to Player 3, $32 to Player 2)', action_id=138&gt;,\n &lt;Entry message='NYNH's share price moves right from $71 to $76', action_id=138&gt;,\n &lt;Entry message='NYNH passes buy trains', action_id=139&gt;,\n &lt;Entry message='NYNH passes buy companies', action_id=140&gt;,\n &lt;Entry message='Player 2 operates C&O', action_id=140&gt;,\n &lt;Entry message='C&O lays tile #15 with rotation 4 on F16 (Scranton)', action_id=141&gt;,\n &lt;Entry message='C&O skips place a token', action_id=141&gt;,\n &lt;Entry message='C&O runs a 3 train for $70: F6-F2', action_id=142&gt;,\n &lt;Entry message='C&O runs a 2 train for $40: F16-F20', action_id=142&gt;,\n &lt;Entry message='C&O pays out $110 = $11.0 per share ($11 to Player 4, $66 to Player 2)', action_id=143&gt;,\n &lt;Entry message='C&O's share price moves right from $65 to $67', action_id=143&gt;,\n &lt;Entry message='C&O skips buy trains', action_id=143&gt;,\n &lt;Entry message='C&O passes buy companies', action_id=144&gt;,\n &lt;Entry message='Player 1 operates NYC', action_id=144&gt;,\n &lt;Entry message='NYC spends $120 and lays tile #7 with rotation 0 on E21', action_id=145&gt;,\n &lt;Entry message='NYC places a token on F16 (Scranton) for $40', action_id=146&gt;,\n &lt;Entry message='NYC runs a 3 train for $70: F16-F20-E19', action_id=147&gt;,\n &lt;Entry message='NYC runs a 2 train for $90: G19-E19', action_id=147&gt;,\n &lt;Entry message='NYC pays out $160 = $16.0 per share ($48 to Player 3, $16 to Player 4, $64 to Player 1, $32 to Player 2)', action_id=148&gt;,\n &lt;Entry message='NYC's share price moves right from $40 to $50', action_id=148&gt;,\n &lt;Entry message='NYC passes buy trains', action_id=149&gt;,\n &lt;Entry message='NYC passes buy companies', action_id=150&gt;,\n &lt;Entry message='-- Stock Round 4 --', action_id=150&gt;,\n &lt;Entry message='Player 3 buys a 10% share of B&O from the IPO for $100', action_id=151&gt;,\n &lt;Entry message='Player 3 declines to sell shares', action_id=152&gt;,\n &lt;Entry message='Player 4 buys a 10% share of B&O from the IPO for $100', action_id=153&gt;,\n &lt;Entry message='Player 4 declines to sell shares', action_id=154&gt;,\n &lt;Entry message='Player 1 buys a 10% share of C&O from the IPO for $67', action_id=155&gt;,\n &lt;Entry message='Player 1 declines to sell shares', action_id=156&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYNH from the IPO for $71', action_id=157&gt;,\n &lt;Entry message='Player 2 declines to sell shares', action_id=158&gt;,\n &lt;Entry message='Player 3 buys a 10% share of B&O from the IPO for $100', action_id=159&gt;,\n &lt;Entry message='Player 3 declines to sell shares', action_id=160&gt;,\n &lt;Entry message='Player 4 buys a 10% share of B&O from the IPO for $100', action_id=161&gt;,\n &lt;Entry message='B&O floats', action_id=161&gt;,\n &lt;Entry message='B&O receives $1000.0', action_id=161&gt;,\n &lt;Entry message='Player 4 declines to sell shares', action_id=162&gt;,\n &lt;Entry message='Player 1 buys a 10% share of C&O from the IPO for $67', action_id=163&gt;,\n &lt;Entry message='Player 1 declines to sell shares', action_id=164&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYNH from the IPO for $71', action_id=165&gt;,\n &lt;Entry message='Player 2 declines to sell shares', action_id=166&gt;,\n &lt;Entry message='Player 3 buys a 10% share of B&O from the IPO for $100', action_id=167&gt;,\n &lt;Entry message='Player 3 declines to sell shares', action_id=168&gt;,\n &lt;Entry message='Player 4 passes', action_id=169&gt;,\n &lt;Entry message='Player 1 buys a 10% share of C&O from the IPO for $67', action_id=170&gt;,\n &lt;Entry message='Player 1 declines to sell shares', action_id=171&gt;,\n &lt;Entry message='Player 2 buys a 10% share of NYNH from the IPO for $71', action_id=172&gt;,\n &lt;Entry message='Player 2 declines to sell shares', action_id=173&gt;,\n &lt;Entry message='Player 3 passes', action_id=174&gt;,\n &lt;Entry message='Player 4 passes', action_id=175&gt;,\n &lt;Entry message='Player 1 passes', action_id=176&gt;,\n &lt;Entry message='Player 2 passes', action_id=177&gt;,\n &lt;Entry message='PRR's share price moves up from $100 to $112', action_id=177&gt;,\n &lt;Entry message='NYNH's share price moves up from $76 to $82', action_id=177&gt;,\n &lt;Entry message='C&O's share price moves up from $67 to $71', action_id=177&gt;,\n &lt;Entry message='NYC's share price moves up from $50 to $60', action_id=177&gt;,\n &lt;Entry message='Player 3 has priority deal', action_id=177&gt;,\n &lt;Entry message='-- Operating Round 4.1 (of 2) --', action_id=177&gt;,\n &lt;Entry message='Player 4 collects $25 from Camden & Amboy', action_id=177&gt;,\n &lt;Entry message='Player 4 collects $30 from Baltimore & Ohio', action_id=177&gt;,\n &lt;Entry message='NYNH collects $10 from Champlain & St.Lawrence', action_id=177&gt;,\n &lt;Entry message='C&O collects $15 from Delaware & Hudson', action_id=177&gt;,\n &lt;Entry message='NYC collects $5 from Schuylkill Valley', action_id=177&gt;,\n &lt;Entry message='Player 1 operates PRR', action_id=177&gt;,\n &lt;Entry message='PRR lays tile #8 with rotation 5 on H14', action_id=178&gt;,\n &lt;Entry message='PRR skips place a token', action_id=178&gt;,\n &lt;Entry message='PRR runs a 2 train for $60: H10-F2', action_id=179&gt;,\n &lt;Entry message='PRR runs a 2 train for $30: H10-H12', action_id=179&gt;,\n &lt;Entry message='PRR pays out $90 = $9.0 per share ($36 to Player 4, $54 to Player 1)', action_id=180&gt;,\n &lt;Entry message='PRR's share price moves right from $112 to $126', action_id=180&gt;,\n &lt;Entry message='PRR buys a 3 train for $180 from The Depot', action_id=181&gt;,\n &lt;Entry message='PRR passes buy trains', action_id=182&gt;,\n &lt;Entry message='PRR passes buy companies', action_id=183&gt;,\n &lt;Entry message='Player 4 operates B&O', action_id=183&gt;,\n &lt;Entry message='B&O places a token on I15', action_id=183&gt;,\n &lt;Entry message='B&O buys Camden & Amboy from Player 4 for $320', action_id=184&gt;,\n &lt;Entry message='B&O spends $80 and lays tile #8 with rotation 1 on I17', action_id=185&gt;,\n &lt;Entry message='B&O skips place a token', action_id=185&gt;,\n &lt;Entry message='B&O skips run routes', action_id=185&gt;,\n &lt;Entry message='B&O does not run', action_id=185&gt;,\n &lt;Entry message='B&O's share price moves left from $100 to $90', action_id=185&gt;,\n &lt;Entry message='B&O buys a 3 train for $180 from The Depot', action_id=186&gt;,\n &lt;Entry message='Baltimore & Ohio closes', action_id=186&gt;,\n &lt;Entry message='B&O buys a 4 train for $300 from The Depot', action_id=187&gt;,\n &lt;Entry message='-- Phase 4 (Operating Rounds: 2 | Train Limit: 3 | Available Tiles: Yellow, Green)', action_id=187&gt;,\n &lt;Entry message='-- Event: 2 trains rust (PRR x2, NYC x1, C&O x2, NYNH x1) --', action_id=187&gt;,\n &lt;Entry message='B&O skips buy companies', action_id=187&gt;,\n &lt;Entry message='Player 3 operates NYNH', action_id=187&gt;,\n &lt;Entry message='NYNH spends $80 and lays tile #57 with rotation 1 on F22 (Providence)', action_id=188&gt;,\n &lt;Entry message='NYNH skips place a token', action_id=188&gt;,\n &lt;Entry message='NYNH runs a 3 train for $100: G19-F20-E19', action_id=189&gt;,\n &lt;Entry message='NYNH pays out $100 = $10.0 per share ($50 to Player 3, $50 to Player 2)', action_id=190&gt;,\n &lt;Entry message='NYNH's share price moves right from $82 to $90', action_id=190&gt;,\n &lt;Entry message='NYNH skips buy trains', action_id=190&gt;,\n &lt;Entry message='NYNH skips buy companies', action_id=190&gt;,\n &lt;Entry message='Player 2 operates C&O', action_id=190&gt;,\n &lt;Entry message='C&O lays tile #56 with rotation 1 on G17 (Reading & Allentown)', action_id=191&gt;,\n &lt;Entry message='C&O places a token on G19 (New York & Newark) for $100', action_id=192&gt;,\n &lt;Entry message='C&O runs a 3 train for $100: G19-F16-G17', action_id=193&gt;,\n &lt;Entry message='C&O pays out $100 = $10.0 per share ($10 to Player 4, $30 to Player 1, $60 to Player 2)', action_id=194&gt;,\n &lt;Entry message='C&O's share price moves right from $71 to $76', action_id=194&gt;,\n &lt;Entry message='C&O skips buy trains', action_id=194&gt;,\n &lt;Entry message='C&O skips buy companies', action_id=194&gt;,\n &lt;Entry message='Player 1 operates NYC', action_id=194&gt;,\n &lt;Entry message='NYC lays tile #26 with rotation 1 on E21', action_id=195&gt;,\n &lt;Entry message='NYC skips place a token', action_id=195&gt;,\n &lt;Entry message='NYC runs a 3 train for $100: G17-F16-G19', action_id=196&gt;,\n &lt;Entry message='NYC pays out $100 = $10.0 per share ($30 to Player 3, $10 to Player 4, $40 to Player 1, $20 to Player 2)', action_id=197&gt;,\n &lt;Entry message='NYC's share price moves up from $60 to $67', action_id=197&gt;,\n &lt;Entry message='NYC buys a 3 train for $110 from PRR', action_id=198&gt;,\n &lt;Entry message='NYC skips buy companies', action_id=198&gt;,\n &lt;Entry message='-- Operating Round 4.2 (of 2) --', action_id=198&gt;,\n &lt;Entry message='NYNH collects $10 from Champlain & St.Lawrence', action_id=198&gt;,\n &lt;Entry message='B&O collects $25 from Camden & Amboy', action_id=198&gt;,\n &lt;Entry message='C&O collects $15 from Delaware & Hudson', action_id=198&gt;,\n &lt;Entry message='NYC collects $5 from Schuylkill Valley', action_id=198&gt;,\n &lt;Entry message='Player 1 operates PRR', action_id=198&gt;,\n &lt;Entry message='PRR lays tile #53 with rotation 0 on I15 (Baltimore)', action_id=199&gt;,\n &lt;Entry message='PRR skips place a token', action_id=199&gt;,\n &lt;Entry message='PRR skips run routes', action_id=199&gt;,\n &lt;Entry message='PRR does not run', action_id=199&gt;,\n &lt;Entry message='PRR's share price moves left from $126 to $112', action_id=199&gt;,\n &lt;Entry message='PRR buys a 4 train for $300 from The Depot', action_id=200&gt;,\n &lt;Entry message='PRR passes buy trains', action_id=201&gt;,\n &lt;Entry message='PRR skips buy companies', action_id=201&gt;,\n &lt;Entry message='Player 3 operates NYNH', action_id=201&gt;,\n &lt;Entry message='NYNH lays tile #53 with rotation 1 on E23 (Boston)', action_id=202&gt;,\n &lt;Entry message='NYNH skips place a token', action_id=202&gt;,\n &lt;Entry message='NYNH runs a 3 train for $140: G19-E23-E19', action_id=203&gt;,\n &lt;Entry message='NYNH withholds $140', action_id=204&gt;,\n &lt;Entry message='NYNH's share price moves left from $90 to $82', action_id=204&gt;,\n &lt;Entry message='NYNH buys a 4 train for $300 from The Depot', action_id=205&gt;,\n &lt;Entry message='NYNH skips buy companies', action_id=205&gt;,\n &lt;Entry message='Player 4 operates B&O', action_id=205&gt;,\n &lt;Entry message='B&O lays tile #59 with rotation 0 on H18 (Philadelphia & Trenton)', action_id=206&gt;,\n &lt;Entry message='B&O passes place a token', action_id=207&gt;,\n &lt;Entry message='B&O runs a 4 train for $90: H18-I15', action_id=208&gt;,\n &lt;Entry message='B&O runs a 3 train for $70: H10-I15', action_id=208&gt;,\n &lt;Entry message='B&O pays out $160 = $16.0 per share ($48 to Player 3, $64 to Player 4)', action_id=209&gt;,\n &lt;Entry message='B&O's share price moves right from $90 to $100', action_id=209&gt;,\n &lt;Entry message='B&O skips buy trains', action_id=209&gt;,\n &lt;Entry message='B&O skips buy companies', action_id=209&gt;,\n &lt;Entry message='Player 2 operates C&O', action_id=209&gt;,\n &lt;Entry message='C&O lays tile #69 with rotation 0 on G7 (Akron & Canton)', action_id=210&gt;,\n &lt;Entry message='C&O skips place a token', action_id=210&gt;,\n &lt;Entry message='C&O runs a 3 train for $100: G19-F16-G17', action_id=211&gt;,\n &lt;Entry message='C&O pays out $100 = $10.0 per share ($10 to Player 4, $30 to Player 1, $60 to Player 2)', action_id=212&gt;,\n &lt;Entry message='C&O's share price moves right from $76 to $82', action_id=212&gt;,\n &lt;Entry message='C&O skips buy trains', action_id=212&gt;,\n &lt;Entry message='C&O skips buy companies', action_id=212&gt;,\n &lt;Entry message='Player 1 operates NYC', action_id=212&gt;,\n &lt;Entry message='NYC lays tile #9 with rotation 1 on F14', action_id=213&gt;,\n &lt;Entry message='NYC passes place a token', action_id=214&gt;,\n &lt;Entry message='NYC runs a 3 train for $140: G19-E23-E19', action_id=215&gt;,\n &lt;Entry message='NYC runs a 3 train for $100: G17-F16-G19', action_id=215&gt;,\n &lt;Entry message='NYC pays out $240 = $24.0 per share ($72 to Player 3, $24 to Player 4, $96 to Player 1, $48 to Player 2)', action_id=216&gt;,\n &lt;Entry message='NYC's share price moves right from $67 to $68', action_id=216&gt;,\n &lt;Entry message='NYC passes buy trains', action_id=217&gt;,\n &lt;Entry message='NYC skips buy companies', action_id=217&gt;,\n &lt;Entry message='-- Stock Round 5 --', action_id=217&gt;]\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#stock-round-5",
    "href": "game/game_test.html#stock-round-5",
    "title": "Game Test",
    "section": "Stock Round 5",
    "text": "Stock Round 5\n\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:00] Player 3 buys a 10% share of B&O from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:00] Player 3 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:00] Player 4 buys a 10% share of B&O from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:00] Player 4 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:00] Player 1 buys a 10% share of B&O from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:00] Player 1 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[12]\n)  # [18:01] Player 2 pars ERIE at $100\n# [18:01] Player 2 buys a 20% share of ERIE from the IPO for $200\n# [18:01] Player 2 becomes the president of ERIE\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:01] Player 2 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:01] Player 3 buys a 10% share of ERIE from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:04] Player 3 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:04] Player 4 buys a 10% share of ERIE from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:04] Player 4 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:04] Player 1 buys a 10% share of ERIE from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:04] Player 1 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:05] Player 2 sells a 10% share of NYC and receives $68\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:05] Player 2 buys a 10% share of ERIE from the IPO for $100\n# [18:05] ERIE floats\n# [18:05] ERIE receives $1000\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:05] Player 2 sells a 10% share of NYC and receives $68\ng.process_action(action_helper.get_all_choices()[-1])  # [18:05] Player 2 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [18:05] Player 3 passes\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:05] Player 4 buys a 10% share of ERIE from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:05] Player 4 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:05] Player 1 buys a 10% share of NYC from the market for $68\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:05] Player 1 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:06] Player 2 buys a 10% share of ERIE from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:06] Player 2 declines to sell shares\ng.process_action(action_helper.get_all_choices()[-1])  # [18:06] Player 3 passes\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:06] Player 4 buys a 10% share of ERIE from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:06] Player 4 declines to sell shares\ng.process_action(action_helper.get_all_choices()[-1])  # [18:06] Player 1 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [18:06] Player 2 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [18:06] Player 3 passes\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:06] Player 4 buys a 10% share of ERIE from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:06] Player 4 declines to sell shares\ng.process_action(action_helper.get_all_choices()[-1])  # [18:06] Player 1 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [18:06] Player 2 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [18:06] Player 3 passes\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:06] Player 4 buys a 10% share of NYC from the market for $68\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:06] Player 4 declines to sell shares\ng.process_action(action_helper.get_all_choices()[-1])  # pass\ng.process_action(action_helper.get_all_choices()[-1])  # pass\ng.process_action(action_helper.get_all_choices()[-1])  # pass\ng.process_action(action_helper.get_all_choices()[-1])  # pass\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#operating-round-5",
    "href": "game/game_test.html#operating-round-5",
    "title": "Game Test",
    "section": "Operating Round 5",
    "text": "Operating Round 5\n\n# [18:06] B&O collects $25 from Camden & Amboy\n# [18:06] C&O collects $15 from Delaware & Hudson\n# [18:06] NYNH collects $10 from Champlain & St.Lawrence\n# [18:06] NYC collects $5 from Schuylkill Valley\n\n\n# [18:06] Player 1 operates PRR\ng.process_action(\n    action_helper.get_all_choices()[4]\n)  # [18:12] PRR lays tile #15 with rotation 1 on H10 (Pittsburgh)\n# [18:12] PRR skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:12] PRR runs a 4 train for $130: F2-H10-H12-I15\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:12] PRR pays out $130 = $13 per share ($78 to Player 1, $52 to Player 4)\n# [18:12] PRR's share price moves right from $126 to $142\ng.process_action(action_helper.get_all_choices()[-1])  # [18:12] PRR passes buy trains\n# [18:12] PRR skips buy companies\n\n\n# [18:12] Player 4 operates B&O\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:13] B&O spends $80 and lays tile #57 with rotation 0 on J14 (Washington)\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [18:13] B&O places a token on H10 (Pittsburgh) for $40\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:13] B&O runs a 4 train for $140: K13-J14-I15-H18\n# [18:13] B&O runs a 3 train for $120: I15-H10-F2\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:13] B&O pays out $260 = $26 per share ($130 to Player 4, $104 to Player 3, $26 to Player 1)\n# [18:13] B&O's share price moves right from $100 to $112\n# [18:13] B&O passes buy trains\n# [18:13] B&O skips buy companies\n\n\n# [18:13] Player 2 operates ERIE\n# [18:13] ERIE places a token on E11\ng.process_action(\n    action_helper.get_all_choices()[2]\n)  # [18:13] ERIE lays tile #59 with rotation 3 on E11 (Dunkirk & Buffalo)\n# [18:13] ERIE must choose city for token\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [18:13] ERIE places a token on E11 (Dunkirk & Buffalo)\n# [18:13] ERIE skips place a token\n# [18:13] ERIE skips run routes\n# [18:13] ERIE does not run\n# [18:13] ERIE's share price moves left from $100 to $90\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:13] ERIE buys a 4 train for $300 from The Depot\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:13] ERIE buys a 5 train for $450 from The Depot\n# [18:13] -- Phase 5 (Operating Rounds: 3 | Train Limit: 2 | Available Tiles: Yellow, Green, Brown) --\n# [18:13] -- Event: Private companies close --\n# [18:13] ERIE skips buy companies\n\n\n# [18:13] Player 2 operates C&O\ng.process_action(\n    action_helper.get_all_choices()[-4]\n)  # [18:16] C&O lays tile #66 with rotation 0 on H18 (Philadelphia & Trenton)\n# [18:16] C&O skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:16] C&O runs a 3 train for $160: G19-H18-I15\ng.process_action(action_helper.get_all_choices()[1])  # [18:16] C&O withholds $160\n# [18:16] C&O's share price moves left from $90 to $82\ng.process_action(\n    action_helper.get_all_choices()[474]\n)  # [18:17] C&O buys a 5 train for $200 from ERIE\n# [18:17] C&O skips buy companies\n\n\n# [18:17] Player 3 operates NYNH\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:19] NYNH lays tile #63 with rotation 0 on E19 (Albany)\n# [18:19] NYNH skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:19] NYNH runs a 4 train for $100: G19-F20-F22-F24\n# [18:19] NYNH runs a 3 train for $150: G19-E19-E23\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:21] NYNH pays out $250 = $25 per share ($125 to Player 2, $125 to Player 3)\n# [18:21] NYNH's share price moves right from $90 to $100\n# [18:21] NYNH skips buy trains\n# [18:21] NYNH skips buy companies\n\n\n# [18:21] Player 1 operates NYC\ng.process_action(\n    action_helper.get_all_choices()[8]\n)  # [18:21] NYC lays tile #62 with rotation 0 on G19 (New York & Newark)\ng.process_action(\n    action_helper.get_all_choices()[3]\n)  # [18:21] NYC places a token on H18 (Philadelphia & Trenton) for $100\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:21] NYC runs a 3 train for $170: G19-E19-E23\n# [18:21] NYC runs a 3 train for $180: G19-H18-I15\ng.process_action(action_helper.get_all_choices()[1])  # [18:21] NYC withholds $350\n# [18:21] NYC's share price moves left from $69 to $67\n# [18:21] NYC skips buy trains\n# [18:21] NYC skips buy companies\n\n\n# [18:21] -- Operating Round 5.2 (of 2) --\n# [18:21] Player 1 operates PRR\ng.process_action(\n    action_helper.get_all_choices()[-3]\n)  # [18:21] PRR lays tile #9 with rotation 0 on G11\n# [18:21] PRR skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:21] PRR runs a 4 train for $160: F2-H10-H12-I15\ng.process_action(action_helper.get_all_choices()[1])  # [18:21] PRR withholds $160\n# [18:21] PRR's share price moves left from $142 to $126\ng.process_action(action_helper.get_all_choices()[-1])  # [18:21] PRR passes buy trains\n# [18:21] PRR skips buy companies\n\n\n# [18:21] Player 4 operates B&O\ng.process_action(\n    action_helper.get_all_choices()[6]\n)  # [18:22] B&O lays tile #61 with rotation 0 on I15 (Baltimore)\n# [18:22] B&O skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:22] B&O runs a 4 train for $170: K13-J14-I15-H18\n# [18:22] B&O runs a 3 train for $160: I15-H10-F2\ng.process_action(action_helper.get_all_choices()[1])  # [18:22] B&O withholds $330\n# [18:22] B&O's share price moves left from $112 to $100\n# [18:22] B&O skips buy trains\n# [18:22] B&O skips buy companies\n\n\n# [18:22] Player 3 operates NYNH\ng.process_action(\n    action_helper.get_all_choices()[5]\n)  # [18:22] NYNH lays tile #8 with rotation 5 on D18\n# [18:22] NYNH skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:22] NYNH runs a 4 train for $120: G19-F20-F22-F24\n# [18:22] NYNH runs a 3 train for $170: G19-E19-E23\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:22] NYNH pays out $290 = $29 per share ($145 to Player 2, $145 to Player 3)\n# [18:22] NYNH's share price moves right from $100 to $111\n# [18:22] NYNH skips buy trains\n# [18:22] NYNH skips buy companies\n\n\n# [18:22] Player 2 operates ERIE\ng.process_action(\n    action_helper.get_all_choices()[5]\n)  # [18:22] ERIE lays tile #8 with rotation 2 on F12\n# [18:22] ERIE skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:22] ERIE runs a 4 train for $70: E11-F16\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:23] ERIE pays out $70 = $7 per share ($28 to Player 2, $28 to Player 4, $7 to Player 1, $7 to Player 3)\n# [18:23] ERIE's share price moves right from $90 to $100\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:23] ERIE buys a 5 train for $450 from The Depot\n# [18:23] ERIE skips buy companies\n\n\n# [18:23] Player 2 operates C&O\ng.process_action(\n    action_helper.get_all_choices()[-3]\n)  # [18:23] C&O lays tile #68 with rotation 2 on E11 (Dunkirk & Buffalo)\n# [18:23] C&O skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:23] C&O runs a 5 train for $220: E11-F16-G17-G19-H18\n# [18:23] C&O runs a 3 train for $110: F2-F6-G7\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:23] C&O pays out $330 = $33 per share ($198 to Player 2, $99 to Player 1, $33 to Player 4)\n# [18:23] C&O's share price moves right from $82 to $90\n# [18:23] C&O skips buy trains\n# [18:23] C&O skips buy companies\n\n\n# [18:23] Player 1 operates NYC\ng.process_action(\n    action_helper.get_all_choices()[41]\n)  # [18:23] NYC lays tile #9 with rotation 1 on D16\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [18:23] NYC passes place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [18:23] NYC runs a 3 train for $170: G19-E19-E23\n# [18:23] NYC runs a 3 train for $190: G19-H18-I15\ng.process_action(action_helper.get_all_choices()[1])  # [18:23] NYC withholds $360\n# [18:23] NYC's share price moves left from $67 to $63\n# [18:23] NYC skips buy trains\n# [18:23] NYC skips buy companies\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#stock-round-6",
    "href": "game/game_test.html#stock-round-6",
    "title": "Game Test",
    "section": "Stock Round 6",
    "text": "Stock Round 6\n\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:11] Player 1 pars B&M at $100\n# [19:11] Player 1 buys a 20% share of B&M from the IPO for $200\n# [19:11] Player 1 becomes the president of B&M\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:11] Player 1 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [19:12] Player 2 pars CPR at $100\n# [19:12] Player 2 buys a 20% share of CPR from the IPO for $200\n# [19:12] Player 2 becomes the president of CPR\ng.process_action(\n    action_helper.get_all_choices()[9]\n)  # [19:13] Player 2 sells a 10% share of NYNH and receives $111\n# [19:13] NYNH's share price moves down from $111 to $100\ng.process_action(action_helper.get_all_choices()[-1])\ng.process_action(\n    action_helper.get_all_choices()[2]\n)  # [19:14] Player 3 buys a 10% share of CPR from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:14] Player 3 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[2]\n)  # [19:14] Player 4 buys a 10% share of CPR from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:14] Player 4 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[2]\n)  # [19:15] Player 1 sells 3 shares of PRR and receives $378\n# [19:15] Player 4 becomes the president of PRR\n# [19:15] PRR's share price moves down from $126 to $90\ng.process_action(\n    action_helper.get_all_choices()[-2]\n)  # [19:15] Player 1 sells a 10% share of ERIE and receives $100\n# [19:15] ERIE's share price moves down from $100 to $90\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [19:15] Player 1 buys a 10% share of B&M from the IPO for $100\ng.process_action(action_helper.get_all_choices()[-1])\ng.process_action(\n    action_helper.get_all_choices()[3]\n)  # [19:15] Player 2 buys a 10% share of ERIE from the market for $90\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:15] Player 2 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:15] Player 3 buys a 10% share of NYNH from the market for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:15] Player 3 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [19:15] Player 4 buys a 10% share of CPR from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:15] Player 4 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:15] Player 1 buys a 10% share of B&M from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:16] Player 1 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [19:16] Player 2 buys a 10% share of CPR from the IPO for $100\n# [19:16] CPR floats\n# [19:16] CPR receives $1000\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:16] Player 2 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[2]\n)  # [19:16] Player 3 buys a 10% share of PRR from the market for $90\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:16] Player 3 declines to sell shares\ng.process_action(action_helper.get_all_choices()[-1])  # [19:16] Player 4 passes\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:16] Player 1 buys a 10% share of B&M from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:16] Player 1 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [19:16] Player 2 buys a 10% share of CPR from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:17] Player 2 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [19:18] Player 3 buys a 10% share of CPR from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:18] Player 3 declines to sell shares\ng.process_action(action_helper.get_all_choices()[-1])  # [19:18] Player 4 passes\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:18] Player 1 buys a 10% share of B&M from the IPO for $100\n# [19:18] B&M floats\n# [19:18] B&M receives $1000\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:18] Player 1 declines to sell shares\ng.process_action(\n    action_helper.get_all_choices()[-4]\n)  # [19:18] Player 2 sells 2 shares of NYNH and receives $200\n# [19:18] NYNH's share price moves down from $100 to $80\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [19:18] Player 2 buys a 10% share of CPR from the IPO for $100\ng.process_action(action_helper.get_all_choices()[-1])\ng.process_action(action_helper.get_all_choices()[-1])  # [19:19] Player 3 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [19:19] Player 4 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [19:19] Player 1 passes\ng.process_action(\n    action_helper.get_all_choices()[1]\n)  # [19:19] Player 2 buys a 10% share of CPR from the IPO for $100\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:19] Player 2 declines to sell shares\ng.process_action(action_helper.get_all_choices()[-1])  # [19:19] Player 3 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [19:19] Player 4 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [19:19] Player 1 passes\ng.process_action(action_helper.get_all_choices()[-1])  # [19:19] Player 2 passes\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#operating-round-6",
    "href": "game/game_test.html#operating-round-6",
    "title": "Game Test",
    "section": "Operating Round 6",
    "text": "Operating Round 6\n\n6.1\n\n# [19:19] Player 2 operates C&O\ng.process_action(\n    action_helper.get_all_choices()[10]\n)  # [19:21] C&O lays tile #9 with rotation 1 on G9\n# [19:21] C&O skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:21] C&O runs a 5 train for $220: E11-F16-G17-G19-H18\n# [19:21] C&O runs a 3 train for $110: F2-F6-G7\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:21] C&O pays out $330 = $33 per share ($198 to Player 2, $99 to Player 1, $33 to Player 4)\n# [19:21] C&O's share price moves right from $100 to $111\n# [19:21] C&O skips buy trains\n# [19:21] C&O skips buy companies\n\n\n# [19:21] Player 4 operates B&O\ng.process_action(\n    action_helper.get_all_choices()[28]\n)  # [19:22] B&O lays tile #46 with rotation 5 on G5\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:22] B&O passes place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:22] B&O runs a 4 train for $170: K13-J14-I15-H18\n# [19:22] B&O runs a 3 train for $160: I15-H10-F2\ng.process_action(action_helper.get_all_choices()[1])  # [19:22] B&O withholds $330\n# [19:22] B&O's share price moves left from $100 to $90\n# [19:22] B&O skips buy trains\n# [19:22] B&O skips buy companies\n\n\n# [19:22] Player 1 operates B&M\n# [19:22] B&M places a token on E23\ng.process_action(\n    action_helper.get_all_choices()[11]\n)  # [19:24] B&M lays tile #45 with rotation 4 on E21\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:24] B&M passes place a token\n# [19:24] B&M skips run routes\n# [19:24] B&M does not run\n# [19:24] B&M's share price moves left from $100 to $90\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:24] B&M buys a 5 train for $450 from The Depot\ng.process_action(action_helper.get_all_choices()[-1])  # [19:24] B&M passes buy trains\n# [19:24] B&M skips buy companies\n\n\n# [19:24] Player 2 operates CPR\n# [19:24] CPR places a token on A19\ng.process_action(\n    action_helper.get_all_choices()[-3]\n)  # [19:24] CPR spends $80 and lays tile #9 with rotation 0 on B18\n# [19:24] CPR skips place a token\n# [19:24] CPR skips run routes\n# [19:24] CPR does not run\n# [19:24] CPR's share price moves left from $100 to $90\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:24] CPR buys a 6 train for $630 from The Depot\n# [19:24] -- Phase 6 (Operating Rounds: 3 | Train Limit: 2 | Available Tiles: Yellow, Green, Brown) --\n# [19:24] -- Event: 3 trains rust ( C&O x1, NYC x2, NYNH x1, B&O x1) --\ng.process_action(action_helper.get_all_choices()[-1])  # [19:25] CPR passes buy trains\n# [19:25] CPR skips buy companies\n\n\n# [19:25] Player 2 operates ERIE\ng.process_action(\n    action_helper.get_all_choices()[6]\n)  # [19:25] ERIE lays tile #25 with rotation 2 on F12\n# [19:25] ERIE skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:25] ERIE runs a 5 train for $80: E11-H10\ng.process_action(action_helper.get_all_choices()[1])  # [19:25] ERIE withholds $80\n# [19:25] ERIE's share price moves left from $100 to $90\n# [19:25] ERIE skips buy trains\n# [19:25] ERIE skips buy companies\n\n\n# [19:25] Player 4 operates PRR\ng.process_action(\n    action_helper.get_all_choices()[8]\n)  # [19:26] PRR lays tile #23 with rotation 1 on H14\n# [19:26] PRR skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:26] PRR runs a 4 train for $170: F2-H10-H12-I15\ng.process_action(action_helper.get_all_choices()[1])  # [19:27] PRR withholds $170\n# [19:27] PRR's share price moves left from $90 to $82\ng.process_action(action_helper.get_all_choices()[-1])  # [19:27] PRR passes buy trains\n# [19:27] PRR skips buy companies\n\n\n# [19:27] Player 3 operates NYNH\ng.process_action(\n    action_helper.get_all_choices()[20]\n)  # [19:27] NYNH lays tile #8 with rotation 4 on D12\n# [19:27] NYNH skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:27] NYNH runs a 4 train for $190: G19-E19-D14-E11\ng.process_action(action_helper.get_all_choices()[1])  # [19:27] NYNH withholds $190\n# [19:27] NYNH's share price moves left from $80 to $75\n# [19:27] NYNH passes buy trains\n# [19:27] NYNH skips buy companies\n\n\n# [19:27] Player 1 operates NYC\ng.process_action(\n    action_helper.get_all_choices()[-10]\n)  # [19:27] NYC lays tile #40 with rotation 0 on F12\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [19:27] NYC passes place a token\n# [19:27] NYC skips run routes\n# [19:27] NYC does not run\n# [19:27] NYC's share price moves left from $65 to $58\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [19:27] NYC buys a 6 train for $630 from The Depot\ng.process_action(action_helper.get_all_choices()[-1])  # [19:28] NYC passes buy trains\n# [19:28] NYC skips buy companies\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()\n\n\n\n6.2\n\n# [19:28] Player 2 operates C&O\ng.process_action(\n    action_helper.get_all_choices()[24]\n)  # [20:27] C&O lays tile #23 with rotation 3 on G11\n# [20:27] C&O skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:27] C&O runs a 5 train for $220: E11-F16-G17-G19-H18\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:27] C&O pays out $220 = $22 per share ($132 to Player 2, $66 to Player 1, $22 to Player 4)\n# [20:27] C&O's share price moves right from $111 to $125\ng.process_action(action_helper.get_all_choices()[-1])  # [20:27] C&O passes buy trains\n# [20:27] C&O skips buy companies\n\n\n# [20:27] Player 4 operates B&O\ng.process_action(\n    action_helper.get_all_choices()[42]\n)  # [20:27] B&O lays tile #43 with rotation 0 on G11\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [20:28] B&O passes place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:28] B&O runs a 4 train for $210: F2-H10-I15-H18\ng.process_action(action_helper.get_all_choices()[1])  # [20:28] B&O withholds $210\n# [20:28] B&O's share price moves left from $90 to $82\ng.process_action(\n    action_helper.get_all_choices()[-2]\n)  # [20:28] B&O exchanges a 4 for a D train for $800 from The Depot\n# [20:28] -- Phase D (Operating Rounds: 3 | Train Limit: 2 | Available Tiles: Yellow, Green, Brown) --\n# [20:28] -- Event: 4 trains rust ( The Depot x1, PRR x1, NYNH x1, ERIE x1) --\n# [20:28] B&O passes buy trains\n# [20:28] B&O skips buy companies\n\n\n# [20:28] Player 1 operates B&M\ng.process_action(\n    action_helper.get_all_choices()[11]\n)  # [20:28] B&M lays tile #8 with rotation 5 on D20\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [20:28] B&M passes place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:28] B&M runs a 5 train for $170: E23-F24-F22-F20-G19\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:28] B&M pays out $170 = $17 per share ($102 to Player 1)\n# [20:28] B&M's share price moves right from $90 to $100\ng.process_action(action_helper.get_all_choices()[-1])  # [20:28] B&M passes buy trains\n# [20:28] B&M skips buy companies\n\n\n# [20:28] Player 2 operates CPR\ng.process_action(\n    action_helper.get_all_choices()[-3]\n)  # [20:28] CPR spends $120 and lays tile #9 with rotation 0 on C17\n# [20:28] CPR skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:29] CPR runs a 6 train for $50: A19-B20\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:29] CPR pays out $50 = $5 per share ($30 to Player 2, $10 to Player 3, $10 to Player 4)\n# [20:29] CPR's share price moves right from $90 to $100\ng.process_action(action_helper.get_all_choices()[-1])  # [20:29] CPR passes buy trains\n# [20:29] CPR skips buy companies\n\n\n# [20:29] Player 2 operates ERIE\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:29] ERIE spends $80 and lays tile #59 with rotation 3 on D10 (Hamilton & Toronto)\n# [20:29] ERIE skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:29] ERIE runs a 5 train for $130: D10-E11-G7-F6\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:29] ERIE pays out $130 = $13 per share ($65 to Player 2, $52 to Player 4, $13 to Player 3)\n# [20:29] ERIE's share price moves right from $90 to $100\n# [20:29] ERIE skips buy trains\n# [20:29] ERIE skips buy companies\n\n\n# [20:29] Player 4 operates PRR\ng.process_action(\n    action_helper.get_all_choices()[11]\n)  # [20:29] PRR lays tile #57 with rotation 1 on H16 (Lancaster)\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [20:29] PRR passes place a token\n# [20:29] PRR skips run routes\n# [20:29] PRR does not run\n# [20:29] PRR's share price moves left from $82 to $76\ng.process_action(\n    action_helper.get_all_choices()[440]\n)  # [20:30] Player 4 sells 4 shares of ERIE and receives $400\n# [20:30] ERIE's share price moves down from $100 to $71\ng.process_action(\n    action_helper.get_all_choices()[433]\n)  # [20:30] Player 4 sells a 10% share of CPR and receives $100\n# [20:30] CPR's share price moves down from $100 to $90\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:30] Player 4 contributes $670\n# [20:30] PRR buys a D train for $1100 from The Depot\n# [20:30] PRR skips buy companies\n\n\n# [20:30] Player 3 operates NYNH\ng.process_action(\n    action_helper.get_all_choices()[37]\n)  # [20:30] NYNH lays tile #58 with rotation 3 on F10 (Erie)\n# [20:30] NYNH skips place a token\n# [20:30] NYNH skips run routes\n# [20:30] NYNH does not run\n# [20:30] NYNH's share price moves left from $75 to $71\n\n\ng.process_action(\n    action_helper.get_all_choices()[9]\n)  # [20:31] Player 3 sells 4 shares of B&O and receives $328\n# [20:31] B&O's share price moves down from $82 to $62\ng.process_action(\n    action_helper.get_all_choices()[5]\n)  # [20:31] Player 3 sells 2 shares of CPR and receives $180\n# [20:31] CPR's share price moves down from $90 to $76\ng.process_action(\n    action_helper.get_all_choices()[4]\n)  # [20:31] Player 3 sells a 10% share of ERIE and receives $71\n# [20:31] ERIE's share price moves down from $71 to $67\ng.process_action(\n    action_helper.get_all_choices()[3]\n)  # [20:31] Player 3 sells 3 shares of NYC and receives $174\n# [20:31] NYC's share price moves down from $58 to $40\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:31] Player 3 sells a 10% share of PRR and receives $76\n# [20:31] PRR's share price moves down from $76 to $71\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:31] Player 3 contributes $860\n# [20:31] NYNH buys a D train for $1100 from The Depot\n# [20:31] NYNH skips buy companies\n\n\n# [20:31] Player 1 operates NYC\ng.process_action(\n    action_helper.get_all_choices()[56]\n)  # [20:31] NYC lays tile #24 with rotation 4 on G9\ng.process_action(\n    action_helper.get_all_choices()[3]\n)  # [20:32] NYC places a token on E11 (Dunkirk & Buffalo) for $100\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:32] NYC runs a 6 train for $280: I15-H18-G19-G17-F16-E11\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [20:32] NYC pays out $280 = $28 per share ($140 to Player 1, $84 to NYC, $56 to Player 4)\n# [20:32] NYC's share price moves right from $40 to $50\ng.process_action(action_helper.get_all_choices()[-1])  # [20:32] NYC passes buy trains\n# [20:32] NYC skips buy companies\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()\n\n\n\n6.3\n\n# [20:32] Player 2 operates C&O\ng.process_action(\n    action_helper.get_all_choices()[52]\n)  # [21:35] C&O lays tile #24 with rotation 1 on H8\n# [21:35] C&O skips place a token\n# router.debug = True\n# router.verbose = True\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:36] C&O runs a 5 train for $240: F2-F16-G17-G19-H18\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:36] C&O pays out $240 = $24 per share ($144 to Player 2, $72 to Player 1, $24 to Player 4)\n# [21:36] C&O's share price moves right from $125 to $140\ng.process_action(action_helper.get_all_choices()[-1])  # [21:36] C&O passes buy trains\n# [21:36] C&O skips buy companies\n\n\n# [21:36] Player 1 operates B&M\ng.process_action(\n    action_helper.get_all_choices()[17]\n)  # [21:36] B&M lays tile #23 with rotation 1 on D18\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:36] B&M places a token on D14 (Rochester) for $40\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:36] B&M runs a 5 train for $170: E23-F24-F22-F20-G19\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:36] B&M pays out $170 = $17 per share ($102 to Player 1)\n# [21:36] B&M's share price moves right from $100 to $112\ng.process_action(action_helper.get_all_choices()[-1])  # [21:36] B&M passes buy trains\n# [21:36] B&M skips buy companies\n\n\n# [21:36] Player 2 operates CPR\ng.process_action(\n    action_helper.get_all_choices()[27]\n)  # [21:36] CPR lays tile #20 with rotation 0 on D16\n# [21:36] CPR skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:36] CPR runs a 6 train for $50: A19-B20\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:36] CPR pays out $50 = $5 per share ($30 to Player 2, $15 to CPR, $5 to Player 4)\n# [21:36] CPR's share price moves right from $76 to $82\ng.process_action(action_helper.get_all_choices()[-1])  # [21:36] CPR passes buy trains\n# [21:36] CPR skips buy companies\n\n\n# [21:36] Player 3 operates NYNH\ng.process_action(\n    action_helper.get_all_choices()[9]\n)  # [21:37] NYNH lays tile #47 with rotation 0 on D16\n# [21:37] NYNH skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:37] NYNH runs a D train for $250: E23-F24-F22-F20-G19-E19-F20-F16\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:37] NYNH pays out $250 = $25 per share ($150 to Player 3, $50 to Player 2, $50 to NYNH)\n# [21:37] NYNH's share price moves right from $71 to $75\n# [21:37] NYNH passes buy trains\n# [21:37] NYNH skips buy companies\n\n\n# [21:37] Player 4 operates PRR\ng.process_action(\n    action_helper.get_all_choices()[35]\n)  # [21:37] PRR lays tile #24 with rotation 1 on F14\n# [21:37] PRR skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:37] PRR runs a D train for $180: F2-H10-H12-H16-H18\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:37] PRR pays out $180 = $18 per share ($72 to Player 4, $54 to Player 1, $54 to PRR)\n# [21:37] PRR's share price moves right from $71 to $76\ng.process_action(action_helper.get_all_choices()[-1])  # [21:37] PRR passes buy trains\n# [21:37] PRR skips buy companies\n\n\n# [21:37] Player 2 operates ERIE\ng.process_action(\n    action_helper.get_all_choices()[7]\n)  # [21:38] ERIE lays tile #67 with rotation 3 on D10 (Hamilton & Toronto)\n# [21:38] ERIE skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:38] ERIE runs a 5 train for $170: F2-E11-D10\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:38] ERIE pays out $170 = $17 per share ($85 to Player 2, $85 to ERIE)\n# [21:38] ERIE's share price moves right from $67 to $71\ng.process_action(action_helper.get_all_choices()[-1])  # [21:38] ERIE passes buy trains\n# [21:38] ERIE skips buy companies\n\n\n# [21:38] Player 4 operates B&O\ng.process_action(\n    action_helper.get_all_choices()[36]\n)  # [21:38] B&O lays tile #9 with rotation 0 on E15\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:39] B&O passes place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:39] B&O runs a D train for $220: F2-H10-I15-J14-K13\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:39] B&O pays out $220 = $22 per share ($110 to Player 4, $88 to B&O, $22 to Player 1)\n# [21:39] B&O's share price moves right from $62 to $67\ng.process_action(action_helper.get_all_choices()[-1])  # [21:39] B&O passes buy trains\n# [21:39] B&O skips buy companies\n\n\n# [21:39] Player 1 operates NYC\ng.process_action(\n    action_helper.get_all_choices()[20]\n)  # [21:39] NYC lays tile #28 with rotation 0 on D12\n# [21:39] NYC skips place a token\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:39] NYC runs a 6 train for $300: F2-F16-G17-G19-H18-I15\ng.process_action(\n    action_helper.get_all_choices()[0]\n)  # [21:39] NYC pays out $300 = $30 per share ($150 to Player 1, $90 to NYC, $60 to Player 4)\n# [21:39] NYC's share price moves right from $50 to $60\ng.process_action(action_helper.get_all_choices()[-1])  # [21:39] NYC passes buy trains\n# [21:39] NYC skips buy companies\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#stock-round-7",
    "href": "game/game_test.html#stock-round-7",
    "title": "Game Test",
    "section": "Stock Round 7",
    "text": "Stock Round 7\n\ng.process_action(\n    action_helper.get_all_choices()[5]\n)  # [21:46] Player 3 buys a 10% share of NYC from the market for $60\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:46] Player 3 declines to sell shares\n\ng.process_action(\n    action_helper.get_all_choices()[6]\n)  # [21:46] Player 4 buys a 10% share of NYC from the market for $60\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:47] Player 4 declines to sell shares\n\ng.process_action(\n    action_helper.get_all_choices()[5]\n)  # [21:47] Player 1 buys a 10% share of NYC from the market for $60\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:47] Player 1 declines to sell shares\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:47] Player 2 passes\n\ng.process_action(\n    action_helper.get_all_choices()[4]\n)  # [21:47] Player 3 buys a 10% share of B&O from the market for $67\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:47] Player 3 declines to sell shares\n\ng.process_action(\n    action_helper.get_all_choices()[5]\n)  # [21:47] Player 4 buys a 10% share of B&O from the market for $67\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:47] Player 4 declines to sell shares\n\ng.process_action(\n    action_helper.get_all_choices()[4]\n)  # [21:47] Player 1 buys a 10% share of B&O from the market for $67\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:47] Player 1 declines to sell shares\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:48] Player 2 passes\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:48] Player 3 passes\n\ng.process_action(\n    action_helper.get_all_choices()[2]\n)  # [21:48] Player 4 buys a 10% share of PRR from the market for $76\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:48] Player 4 declines to sell shares\n\ng.process_action(\n    action_helper.get_all_choices()[4]\n)  # [21:48] Player 1 buys a 10% share of B&O from the market for $67\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:48] Player 1 declines to sell shares\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:48] Player 2 passes\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:48] Player 3 passes\n\ng.process_action(\n    action_helper.get_all_choices()[2]\n)  # [21:48] Player 4 buys a 10% share of PRR from the market for $76\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:48] Player 4 declines to sell shares\n\ng.process_action(\n    action_helper.get_all_choices()[3]\n)  # [21:48] Player 1 buys a 10% share of ERIE from the market for $71\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:48] Player 1 declines to sell shares\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:48] Player 2 passes\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:48] Player 3 passes\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:48] Player 4 passes\n\ng.process_action(\n    action_helper.get_all_choices()[3]\n)  # [21:49] Player 1 buys a 10% share of ERIE from the market for $71\ng.process_action(\n    action_helper.get_all_choices()[-1]\n)  # [21:49] Player 1 declines to sell shares\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:49] Player 2 passes\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:49] Player 3 passes\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:49] Player 4 passes\n\ng.process_action(action_helper.get_all_choices()[-1])  # [21:49] Player 1 passes\n\n&lt;rl18xx.game.engine.game.title.g1830.Game&gt;\n\n\n\naction_helper.print_summary()",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/game_test.html#rest-of-game",
    "href": "game/game_test.html#rest-of-game",
    "title": "Game Test",
    "section": "Rest Of Game",
    "text": "Rest Of Game\n\n# pass until game over\nwhile not g.finished:\n    g.process_action(action_helper.get_all_choices()[-1])\n\n\naction_helper.print_enabled = True\naction_helper.print_summary()\n\nPlayer 2\n    cash: 885\n    shares: {&lt;Corporation: C&O&gt;: 60, &lt;Corporation: NYC&gt;: 0, &lt;Corporation: NYNH&gt;: 20, &lt;Corporation: ERIE&gt;: 50, &lt;Corporation: CPR&gt;: 60}\n    companies: []\nPlayer 3\n    cash: 36.0\n    shares: {&lt;Corporation: NYC&gt;: 10, &lt;Corporation: NYNH&gt;: 60, &lt;Corporation: B&O&gt;: 10, &lt;Corporation: ERIE&gt;: 0, &lt;Corporation: CPR&gt;: 0, &lt;Corporation: PRR&gt;: 0}\n    companies: []\nPlayer 4\n    cash: 48.0\n    shares: {&lt;Corporation: PRR&gt;: 60, &lt;Corporation: B&O&gt;: 60, &lt;Corporation: C&O&gt;: 10, &lt;Corporation: NYC&gt;: 30, &lt;Corporation: ERIE&gt;: 0, &lt;Corporation: CPR&gt;: 10}\n    companies: []\nPlayer 1\n    cash: 570\n    shares: {&lt;Corporation: PRR&gt;: 30, &lt;Corporation: NYC&gt;: 60, &lt;Corporation: C&O&gt;: 30, &lt;Corporation: B&O&gt;: 30, &lt;Corporation: ERIE&gt;: 20, &lt;Corporation: B&M&gt;: 60}\n    companies: []\n\nPRR\n    cash: 1134.0\n    companies: []\n    trains: [&lt;Train: D-1, owner: &lt;Corporation: PRR&gt;&gt;]\n    share price: Share Price - coordinates: (4, 1), price: 41, types: ['unlimited'], corporations: [&lt;Corporation: PRR&gt;]\nNYC\n    cash: 1979.0\n    companies: []\n    trains: [&lt;Train: 6-1, owner: &lt;Corporation: NYC&gt;&gt;]\n    share price: Share Price - coordinates: (6, 0), price: 18, types: ['multiple_buy'], corporations: [&lt;Corporation: NYC&gt;]\nCPR\n    cash: 905.0\n    companies: []\n    trains: [&lt;Train: 6-0, owner: &lt;Corporation: CPR&gt;&gt;]\n    share price: Share Price - coordinates: (3, 1), price: 48, types: ['no_cert_limit'], corporations: [&lt;Corporation: CPR&gt;]\nB&O\n    cash: 1528.0\n    companies: []\n    trains: [&lt;Train: D-0, owner: &lt;Corporation: B&O&gt;&gt;]\n    share price: Share Price - coordinates: (3, 0), price: 39, types: ['unlimited'], corporations: [&lt;Corporation: B&O&gt;]\nC&O\n    cash: 1515.0\n    companies: []\n    trains: [&lt;Train: 5-0, owner: &lt;Corporation: C&O&gt;&gt;]\n    share price: Share Price - coordinates: (0, 5), price: 90, types: [], corporations: [&lt;Corporation: C&O&gt;]\nERIE\n    cash: 1105.0\n    companies: []\n    trains: [&lt;Train: 5-1, owner: &lt;Corporation: ERIE&gt;&gt;]\n    share price: Share Price - coordinates: (5, 1), price: 34, types: ['unlimited'], corporations: [&lt;Corporation: ERIE&gt;]\nNYNH\n    cash: 1730.0\n    companies: []\n    trains: [&lt;Train: D-2, owner: &lt;Corporation: NYNH&gt;&gt;]\n    share price: Share Price - coordinates: (5, 2), price: 42, types: ['unlimited'], corporations: [&lt;Corporation: NYNH&gt;]\nB&M\n    cash: 1530.0\n    companies: []\n    trains: [&lt;Train: 5-2, owner: &lt;Corporation: B&M&gt;&gt;]\n    share price: Share Price - coordinates: (0, 1), price: 67, types: [], corporations: [&lt;Corporation: B&M&gt;]\n\n\n\n# g.debug = True\n# router.debug = True\nprint(\n    f\"step: {g.active_step()}, player: {g.current_entity}, purchasing power: {g.buying_power(g.current_entity) if hasattr(g.current_entity, 'cash') else 0}\"\n)\nprint(f\"possible actions: {action_helper.get_current_actions()}\")\nprint(f\"company actions: {action_helper.get_company_actions()}\")\n# action_helper.get_all_choices_with_index()\n\nstep: None, player: &lt;Corporation: NYC&gt;, purchasing power: 1979.0\npossible actions: [&lt;class 'rl18xx.game.engine.actions.Bankrupt'&gt;]\ncompany actions: {}",
    "crumbs": [
      "game",
      "Game Test"
    ]
  },
  {
    "objectID": "game/engine.html",
    "href": "game/engine.html",
    "title": "Game Engine",
    "section": "",
    "text": "All games are located within the games subdirectory.",
    "crumbs": [
      "game",
      "Game Engine"
    ]
  },
  {
    "objectID": "game/engine.html#engine",
    "href": "game/engine.html#engine",
    "title": "Game Engine",
    "section": "Engine",
    "text": "Engine\n\nsource\n\nGameMap\n\n GameMap ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "Game Engine"
    ]
  },
  {
    "objectID": "game/engine/game/shared_enhancements.html",
    "href": "game/engine/game/shared_enhancements.html",
    "title": "Shared Enhancements",
    "section": "",
    "text": "This notebook contains all of the python equivalents to the modules/mixins defined within lib/engine/game/ in the Ruby repo.",
    "crumbs": [
      "game",
      "engine",
      "game",
      "Shared Enhancements"
    ]
  },
  {
    "objectID": "game/engine/game/titles/g1830.html",
    "href": "game/engine/game/titles/g1830.html",
    "title": "1830",
    "section": "",
    "text": "This class contains the title-specific configuration and metadata for 1830.\n\nEntities\n\nsource\n\nEntities\n\n Entities ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nMap\n\nsource\n\nMap\n\n Map ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\n\nMeta\n\nsource\n\nMeta\n\n Meta ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\nmeta = Meta()\nmeta.title()\n\n'Meta'\n\n\n\n\n\nGame\n\nsource\n\nGame\n\n Game (names, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "game",
      "titles",
      "1830"
    ]
  },
  {
    "objectID": "game/engine/abilities.html",
    "href": "game/engine/abilities.html",
    "title": "Abilities",
    "section": "",
    "text": "This page contains the different ability types and the attributes which may be set for each type.\nAbilities are mainly used to describe private company powers, but may also apply to other entities such as corporations. Examples of how their use can be seen in the game configuration directory.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#generic-attributes",
    "href": "game/engine/abilities.html#generic-attributes",
    "title": "Abilities",
    "section": "Generic attributes",
    "text": "Generic attributes\nThese attributes may be set for all ability types\n\ntype: The name of the ability type\nowner_type: The company must be owned by this type of entity in order for the ability to be active. Either “player” or “corporation”.\nremove: Game phase when this ability is removed\ncount: The number of times the ability may be used\ncount_per_or: The number of times the ability may be used in each OR; the property count_this_or is reset to 0 at the start of each OR and increments each time the ability is used\nuse_across_ors: If count is more than 1 and this is false, then the ability may only be used within one OR; if an OR starts and the ability has been used at least once, but there is still count remaining, the ability gets used up and removed. Default true.\non_phase: The phase when this ability is active\nafter_phase: The ability is active for all phases after the specified phase\nwhen: (string or array of strings) The game steps or special time descriptor when this ability is active. If no values are provided, this ability is considered to be “passive”, i.e., its effect applies without the user needinng to click on the abilities button to activate it. For an ability to be included in an abilities() call, either a time kwarg or the name of the current game phase class must match (one of) the ability’s when string(s). Examples:\n\nany: usable at any time during the game\nbuying_train: train buying step\ntrack, track_and_token: track-laying step; if normal track lays are used up, but there is still a Track ability, then the active step will not pass on to the next step automatically\nspecial_track: SpecialTrack step when it blocks for a private company that gets multiple lays\ntoken: token-placing step\nroute: running routes step\nsold: when the company is bought from a player by a corporation\nbought_train: when the owning corporation has bought a train; generally used with close abilities\nowning_corp_or_turn: usable at any point during the owning corporation’s OR turn\nowning_player_or_turn: usable at any point during any of the owning player’s OR turns\nowning_player_track: usable during track step during any of the owning player’s OR turns\nowning_player_sr_turn: usable at any point during any of the owning player’s SR turns\nor_between_turns: usable at the start of any corporation’s OR turn, before that corporation has acted\nstock_round: usable any time during a Stock Round\nnever: use with close abilities to prevent a company from closing\nhas_train: when the owning corporation owns at least one train\noperated: when the owning corporation has finished the dividend step on their first turn",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#acquire_company",
    "href": "game/engine/abilities.html#acquire_company",
    "title": "Abilities",
    "section": "acquire_company",
    "text": "acquire_company\nThis company comes with a company when acquired.\n\ncompany: The sym of the additional company to be acquired\n\n\nsource\n\nAcquireCompany\n\n AcquireCompany (company, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#additional_token",
    "href": "game/engine/abilities.html#additional_token",
    "title": "Abilities",
    "section": "additional_token",
    "text": "additional_token\nAdds ‘count’ additional tokens to a purchasing company (1817)\n\nsource\n\nAdditionalToken\n\n AdditionalToken (type=None, description=None, desc_detail=None,\n                  owner_type=None, count=None, remove=None,\n                  use_across_ors=None, count_per_or=None, passive=None,\n                  on_phase=None, after_phase=None, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#assign_corporation",
    "href": "game/engine/abilities.html#assign_corporation",
    "title": "Abilities",
    "section": "assign_corporation",
    "text": "assign_corporation\nDesignate a specific corporation to be the beneficiary of the ability, for example Steamboat Company in 1846.\nWhen a company with this ability is sold to a corporation, the company is automatically assigned to the new owning corporation.\n\ncount: The number of times the ability may be used\nclosed_when_used_up: This ability has a count that is decreased each time it is used. If this attribute is true the private is closed when count reaches zero, if false the private remains open but the discount can no longer be used. Default false.\n\nWith this configuration, the automatic assignment will happen and the company cannot be further reassigned:\n{\n  \"type\": \"assign_corporation\",\n  \"when\": \"sold\",\n  \"count\": 1,\n  \"owner_type\": \"corporation\"\n}\n\nsource\n\nAssignCorporation\n\n AssignCorporation (closed_when_used_up, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#assign_hexes",
    "href": "game/engine/abilities.html#assign_hexes",
    "title": "Abilities",
    "section": "assign_hexes",
    "text": "assign_hexes\nDesignate a hex to the ability. Usually simulates placement of a special power token.\n\nhexes: An array of hex coordinates where this ability may be used.\n\n\nsource\n\nAssignHexes\n\n AssignHexes (hexes, closed_when_used_up=None, cost=0, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#blocks_hexes",
    "href": "game/engine/abilities.html#blocks_hexes",
    "title": "Abilities",
    "section": "blocks_hexes",
    "text": "blocks_hexes\nDesignate hexes which are blocked by this ability. Use the owner_type: \"player\" to specify that the blocking ends when the company is bought in by a corporation.\n\nhexes: An array of hex coordinates that are blocked\n\n\nsource\n\nBlocksHexes\n\n BlocksHexes (hexes, hidden=False, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#blocks_hexes_consent",
    "href": "game/engine/abilities.html#blocks_hexes_consent",
    "title": "Abilities",
    "section": "blocks_hexes_consent",
    "text": "blocks_hexes_consent\nDesignate hexes which are blocked by this ability. Use the owner_type: \"player\" to specify that the blocking ends when the company is bought in by a corporation. However unlike blocks_hexes this doesn’t block the ability except through a front end confirmation, so players (if they click through) are allowed to lay a tile on this hex. This is just like when purchasing a train from another player.\n\nhexes: An array of hex coordinates that are blocked\n\n\nsource\n\nBlocksHexesConsent\n\n BlocksHexesConsent (hexes, hidden=False, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#blocks_partition",
    "href": "game/engine/abilities.html#blocks_partition",
    "title": "Abilities",
    "section": "blocks_partition",
    "text": "blocks_partition\nDesignate a type of partition which this ability disallows crossing. A partition separates an hex in 2 halves. Use the owner_type: \"player\" to specify that the blocking ends when the company is bought in by a corporation.\n\npartition_type: The name of the partition type that is to be blocked, akin to terrain and border types.\n\n\nsource\n\nBlocksPartition\n\n BlocksPartition (partition_type, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#borrow_train",
    "href": "game/engine/abilities.html#borrow_train",
    "title": "Abilities",
    "section": "borrow_train",
    "text": "borrow_train\nMay borrow a train from the Depot for running trains when trainless\n\ntrain_types: Array of train types that are eligible for borrowing\n\n\nsource\n\nBorrowTrain\n\n BorrowTrain (train_types, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#choose_ability",
    "href": "game/engine/abilities.html#choose_ability",
    "title": "Abilities",
    "section": "choose_ability",
    "text": "choose_ability\nAllows you to choose another ability.\n\nchoices: The abilities to choose from.\n\n\nsource\n\nChooseAbility\n\n ChooseAbility (choices=[], **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#close",
    "href": "game/engine/abilities.html#close",
    "title": "Abilities",
    "section": "close",
    "text": "close\nDescribe when the company closes, using the when attribute.\n\ncorporation': If when is set to \"train\", this value is the name of the corporation whose train purchase closes this company.\n\n\nsource\n\nClose\n\n Close (corporation=None, silent=False, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#description",
    "href": "game/engine/abilities.html#description",
    "title": "Abilities",
    "section": "description",
    "text": "description\nProvide a description for an ability that is implemented outside of the ability framework.\n\ndescription: Description of the ability.\n\n\nsource\n\nDescription\n\n Description (type=None, description=None, desc_detail=None,\n              owner_type=None, count=None, remove=None,\n              use_across_ors=None, count_per_or=None, passive=None,\n              on_phase=None, after_phase=None, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#exchange",
    "href": "game/engine/abilities.html#exchange",
    "title": "Abilities",
    "section": "exchange",
    "text": "exchange\nThis company may be exchanged for a single share of a specified corporation during a step that allows exchange.\n\ncorporations: An array with corporation names, whose share may be exchanged. Use a simple \"any\" (no array) to allow for any corporation. Use a simple \"ipoed\" (no array) to allow from any company that has been ipoed.\nfrom: Where the share may be take from, either \"ipo\", \"market\", or an array containing both.\n\n\nsource\n\nExchange\n\n Exchange (corporations, from_, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#generic",
    "href": "game/engine/abilities.html#generic",
    "title": "Abilities",
    "section": "generic",
    "text": "generic\nNot sure what uses this\n\nsource\n\nGeneric\n\n Generic (subtype, from_, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#hex_bonus",
    "href": "game/engine/abilities.html#hex_bonus",
    "title": "Abilities",
    "section": "hex_bonus",
    "text": "hex_bonus\nGive a route bonus if at least one of the hexes are included in the route.\n\nhexes: Name of hexes that gives a bonus.\namount: Revenue bonus.\n\n\nsource\n\nHexBonus\n\n HexBonus (hexes, amount, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#manual_close_company",
    "href": "game/engine/abilities.html#manual_close_company",
    "title": "Abilities",
    "section": "manual_close_company",
    "text": "manual_close_company\n\nsource\n\nManualCloseCompany\n\n ManualCloseCompany (type=None, description=None, desc_detail=None,\n                     owner_type=None, count=None, remove=None,\n                     use_across_ors=None, count_per_or=None, passive=None,\n                     on_phase=None, after_phase=None, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#no_buy",
    "href": "game/engine/abilities.html#no_buy",
    "title": "Abilities",
    "section": "no_buy",
    "text": "no_buy\nThis company may not be bought in.\n\nsource\n\nNoBuy\n\n NoBuy (type=None, description=None, desc_detail=None, owner_type=None,\n        count=None, remove=None, use_across_ors=None, count_per_or=None,\n        passive=None, on_phase=None, after_phase=None, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#purchase_train",
    "href": "game/engine/abilities.html#purchase_train",
    "title": "Abilities",
    "section": "purchase_train",
    "text": "purchase_train\nImmediately purchases the currently available depot train for the owning corporation. - free: If true, the train cost is free, otherwase at cost. Default false.\n\nsource\n\nPurchaseTrain\n\n PurchaseTrain (free=False, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#reservation",
    "href": "game/engine/abilities.html#reservation",
    "title": "Abilities",
    "section": "reservation",
    "text": "reservation\nReserve a token slot\n\nhex: Hex coordinate\nslot: A specific token slot to designate\ncity: Which city to reserve, if multiple cities are on one hex\n\n\nsource\n\nReservation\n\n Reservation (hex, city=0, slot=0, tile=None, icon=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#return_token",
    "href": "game/engine/abilities.html#return_token",
    "title": "Abilities",
    "section": "return_token",
    "text": "return_token\nTake a station token off the board and place back on the charter in the most expensive open location\n\nreimburse: If true, the corporation is reimbursed the token cost of the location where the token is placed\n\n\nsource\n\nReturnToken\n\n ReturnToken (reimburse=False, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#revenue_change",
    "href": "game/engine/abilities.html#revenue_change",
    "title": "Abilities",
    "section": "revenue_change",
    "text": "revenue_change\nThe revenue for this company changes when the conditions set by when and owner_type are satisfied.\n\nrevenue: The new revenue value\n\n\nsource\n\nRevenueChange\n\n RevenueChange (revenue, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#sell_company",
    "href": "game/engine/abilities.html#sell_company",
    "title": "Abilities",
    "section": "sell_company",
    "text": "sell_company\nThis company can be sold to bank for face value. This closes the company.\n\nsource\n\nSellCompany\n\n SellCompany (type=None, description=None, desc_detail=None,\n              owner_type=None, count=None, remove=None,\n              use_across_ors=None, count_per_or=None, passive=None,\n              on_phase=None, after_phase=None, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#shares",
    "href": "game/engine/abilities.html#shares",
    "title": "Abilities",
    "section": "shares",
    "text": "shares\nThis company comes with a share of a corporation when acquired.\n\nshare: If a string in the form of sym_x, where sym is a corporation symbol, and x is a numeric index, gives the certificate of the corporation at index x (x = 0 is the president’s certificate). If \"random_president\", gives a president’s certificate randomly selected at game setup. Gives one ordinary share of one the corporations listed in corporations, randomly selected at game setup.\ncorporations: A list of corporations to be used with \"share\": \"random_share\"\n\n\nsource\n\nShares\n\n Shares (shares, corporations=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#teleport",
    "href": "game/engine/abilities.html#teleport",
    "title": "Abilities",
    "section": "teleport",
    "text": "teleport\nLay a tile and place a station token without connectivity\n\nhexes: An array of hex coordinates that can be used as the teleport destination.\ntiles: An array of tile numbers which may be placed at the teleport destination.\ncost: Cost to use the teleport ability.\nfree_tile_lay: If true, the tile is laid with 0 cost. Default false.\nfrom_owner: If true, this ability uses a token from the owning corporation’s charter; if false, an additional token is created. Default true.\nextra_action: If true, this ability may be used in addition to the turn’s normal token placement step. Default false.\n\n\nsource\n\nTeleport\n\n Teleport (hexes, tiles, cost=None, free_tile_lay=False, from_owner=True,\n           extra_action=False, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#tile_discount",
    "href": "game/engine/abilities.html#tile_discount",
    "title": "Abilities",
    "section": "tile_discount",
    "text": "tile_discount\nDiscount the cost for laying tiles in the specified terrain type\n\ndiscount: Discount amount\nterrain: If set, type of terrain for which discount is provided, otherwise the discount is off the total cost\nhexes: If not specified, all applicable hexes qualifies for the discount. If specified, only specified hexes qualify\nexact_match: Tile may only contain specified terrain type. Default true.\n\n\nsource\n\nTileDiscount\n\n TileDiscount (discount, terrain=None, hexes=None, exact_match=True,\n               **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#tile_income",
    "href": "game/engine/abilities.html#tile_income",
    "title": "Abilities",
    "section": "tile_income",
    "text": "tile_income\nGenerate extra revenue when tiles are laid on specified terrain types.\n\nterrain: Terrain type for this ability\nincome: Extra income per tile lay\nowner_only: Does this income apply to any tile lay (1882 Tresle Bridge) or just the owner (1817 Mountain Engineers)\n\n\nsource\n\nTileIncome\n\n TileIncome (income, terrain=None, owner_only=False, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#tile_lay",
    "href": "game/engine/abilities.html#tile_lay",
    "title": "Abilities",
    "section": "tile_lay",
    "text": "tile_lay\nLay or upgrade one or more track tiles without connectivity, in addition to normal tile lay actions.\n\nhexes: Array of hex coordinates where tiles may be laid.\ntiles: Array of tile numbers which may be laid.\ncost: Cost to use the ability.\nclosed_when_used_up: This ability has a count that is decreased each time it is used. If this attribute is true the private is closed when count reaches zero, if false the private remains open but the discount can no longer be used. Default false.\nfree: If true, the tiles are laid with 0 cost. Default false.\ndiscount: Discount the cost of laying the tile by the given amount. Default 0.\nspecial: If true, do not check that the tile upgrade preserves labels and city count. Default true.\nconnect: If true, and count is greater than 1, tiles laid must connect to each other. Default true.\nblocks: If true and when is sold, then the step TrackLayWhenCompanySold will require a tile lay. Default false.\nreachable: If true, when tile laid, a check is done if one of the controlling corporation’s station tokens are reachable; if not a game error is triggered. Default false.\nmust_lay_together: If true and count is greater than 1, all the tile lays must happen at the same time. If this is true, you might want when to include special_track. Default false.\nmust_lay_all: If true and count is greater than 1 and must_lay_together is true, all the tile lays must be used; if false, then some tile lays may be forfeited. Default false.\nconsume_tile_lay: If true, using this private counts as a corporations tile lay and must follow lay/upgrade rules. Upgrade’s also count towards the corporations ‘upgrade’ lays. Default false.\nlay_count and upgrade_count - Use as an alternative to count. lay_count is the number of yellow tile lays, and upgrade_count is the number of green or higher tile upgrades. When these are set, the ability cannot be used for both new tile lays and upgrades. With these set, you need to make sure the ability.use! call includes an upgrade kwarg.\n\n\nsource\n\nTileLay\n\n TileLay (tiles, hexes=None, free=False, discount=0, special=True,\n          connect=True, blocks=False, reachable=False,\n          must_lay_together=False, cost=0, closed_when_used_up=False,\n          must_lay_all=False, consume_tile_lay=False, lay_count=None,\n          upgrade_count=None, combo_entities=[], **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#token",
    "href": "game/engine/abilities.html#token",
    "title": "Abilities",
    "section": "token",
    "text": "token\nModified station token placement\n\nhexes: Array of hex coordinates where this ability may be used\ncity: Index of the city on the hex where this ability may be used, if multiple cities are there\nprice: Price for placing token\nteleport_price: If present, this ability may be used to place a token without connectivity, for the given price.\ndiscount: ratio discount from the normal price, e.g., 0.25 takes 25% off the token price\nextra_action: If true, this ability may be used in addition to the turn’s normal token placement step. Default false.\nfrom_owner: If true, this ability uses a token from the owning corporation’s charter; if false, an additional token is created. Default false.\ncheater: If an integer is given, this token will be placed into a city at whichever is the lowest unoccupied slot index of the following: a regular slot in the city; the cheater value; one slot higher than the city actually has, effectively increasing the city’s size by one. (See 18 Los Angeles’s optional company “Dewey, Cheatham, and Howe” or the corporations which get removed in 1846 2p Variant for examples). Default nil.\nextra_slot: Simlar to cheater except this token does not take a slot - When cheater is used, when the city gets an extra city slot the ‘cheater’ token goes into the newly opened slot. If extra_slot is used, when the city gets an extra token slot, the new token slot is open - the extra token does not consume it. This also means that an extra_slot token lay in an city with an open slot does not use up the open slot.\nspecial_only: If true, this ability may only be used by explicitly. activating the company to which it belongs (i.e., using the SpecialTrack step); if unset or false, Engine::Step::Tokener#adjust_token_price_ability! infers that the special ability ought to be used whenever a token is being placed in a location that the ability is allowed to use. Default false.\nneutral: If true, this ability uses a “neutral” token, which allows all corporations to pass through it\ncheck_tokenable: If false, skip the tokenable? check before placing the token. Used in 18LA2 for the Angeles Public Dump, which places a special station token that does not actually belong to the owning corporation, and can therefore be placed in the same city as another token belonging to the owning corporation. Note that this property will bypass all tokenable checks, not just :existing_token. Default true.\nconnected: If true, when token placed, a check is done if the desired token slot is connected by track with another city that has a token of the corporation; if not a game error is triggered. Default false.\n\n\nsource\n\nToken\n\n Token (hexes, price=None, teleport_price=None, extra_action=False,\n        from_owner=False, discount=None, city=None, neutral=False,\n        cheater=False, extra_slot=False, special_only=False,\n        check_tokenable=True, closed_when_used_up=False, connected=False,\n        **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#train_buy",
    "href": "game/engine/abilities.html#train_buy",
    "title": "Abilities",
    "section": "train_buy",
    "text": "train_buy\nModify train buy in some way.\n\nface_value: If true, any inter corporation train buy must be at face value. Default false.\n\n\nsource\n\nTrainBuy\n\n TrainBuy (face_value=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#train_discount",
    "href": "game/engine/abilities.html#train_discount",
    "title": "Abilities",
    "section": "train_discount",
    "text": "train_discount\nDiscount the train buy cost. The count attribute specify how many times the discount can be used.\n\ndiscount: Discount amount. If &gt; 1 this is an absolute amount. If 0 &lt; amount &lt; 1 it is the fraction, e.g. 0.75 is a 75% discount.\ntrains: An array of all train names that the discount applies to.\nclosed_when_used_up: This ability has a count that is decreased each time it is used. If this attribute is true the private is closed when count reaches zero, if false the private remains open but the discount can no longer be used. Default false.\n\n\nsource\n\nTrainDiscount\n\n TrainDiscount (discount, trains, closed_when_used_up=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#train_limit",
    "href": "game/engine/abilities.html#train_limit",
    "title": "Abilities",
    "section": "train_limit",
    "text": "train_limit\nModify train limit in some way. For performance reasons, the supporting code needs to be added directly to the game class. See G18MEX#train_limit for an example.\n\nincrease: If positive, this will increase the train limit with this amount in all faces. Default 0.\n\n\nsource\n\nTrainLimit\n\n TrainLimit (increase=None, constant=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/abilities.html#train_scrapper",
    "href": "game/engine/abilities.html#train_scrapper",
    "title": "Abilities",
    "section": "train_scrapper",
    "text": "train_scrapper\n\nsource\n\nTrainScrapper\n\n TrainScrapper (scrap_values={}, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Abilities"
    ]
  },
  {
    "objectID": "game/engine/entities.html",
    "href": "game/engine/entities.html",
    "title": "Game Entities",
    "section": "",
    "text": "We define all required game entity types in this notebook.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#imports",
    "href": "game/engine/entities.html#imports",
    "title": "Game Entities",
    "section": "Imports",
    "text": "Imports",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#operator",
    "href": "game/engine/entities.html#operator",
    "title": "Game Entities",
    "section": "Operator",
    "text": "Operator\n\nsource\n\nOperator\n\n Operator (**kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#share-bundle",
    "href": "game/engine/entities.html#share-bundle",
    "title": "Game Entities",
    "section": "Share Bundle",
    "text": "Share Bundle\n\nsource\n\nShareBundle\n\n ShareBundle (shares, percent=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#share",
    "href": "game/engine/entities.html#share",
    "title": "Game Entities",
    "section": "Share",
    "text": "Share\n\nsource\n\nShare\n\n Share (corporation, owner=None, president=False, percent=10, index=0,\n        cert_size=1)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#share-pool",
    "href": "game/engine/entities.html#share-pool",
    "title": "Game Entities",
    "section": "Share Pool",
    "text": "Share Pool\n\nsource\n\nSharePool\n\n SharePool (game, allow_president_sale=False,\n            no_rebundle_president_buy=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#depot",
    "href": "game/engine/entities.html#depot",
    "title": "Game Entities",
    "section": "Depot",
    "text": "Depot\n\nsource\n\nDepot\n\n Depot (trains, game)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#train",
    "href": "game/engine/entities.html#train",
    "title": "Game Entities",
    "section": "Train",
    "text": "Train\n\nsource\n\nTrain\n\n Train (name:str, distance:Union[int,List[dict]], price:int, index:int=0,\n        **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#company",
    "href": "game/engine/entities.html#company",
    "title": "Game Entities",
    "section": "Company",
    "text": "Company\n\nsource\n\nCompany\n\n Company (sym=None, name=None, value=None, revenue=0, desc='',\n          abilities=[], **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nargs = {\n    \"name\": \"Schuylkill Valley\",\n    \"sym\": \"SV\",\n    \"value\": 20,\n    \"revenue\": 5,\n    \"desc\": \"No special abilities. Blocks G15 while owned by a player.\",\n    \"abilities\": [{\"type\": \"blocks_hexes\", \"owner_type\": \"player\", \"hexes\": [\"G15\"]}],\n    \"color\": None,\n}\nSV = Company(**args)\nSV, SV.sym, SV.id\n\n(&lt;Company: SV&gt;, 'SV', 'SV')",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#bank",
    "href": "game/engine/entities.html#bank",
    "title": "Game Entities",
    "section": "Bank",
    "text": "Bank\n\nsource\n\nBank\n\n Bank (cash, log=None, check=True)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#corporation",
    "href": "game/engine/entities.html#corporation",
    "title": "Game Entities",
    "section": "Corporation",
    "text": "Corporation\n\nsource\n\nCorporation\n\n Corporation (sym=None, name=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n# Example usage\n\nc = Corporation(\n    {\n        \"float_percent\": 60,\n        \"sym\": \"PRR\",\n        \"name\": \"Pennsylvania Railroad\",\n        \"logo\": \"18_chesapeake/PRR\",\n        \"simple_logo\": \"1830/PRR.alt\",\n        \"tokens\": [0, 40, 100, 100],\n        \"coordinates\": \"H12\",\n        \"color\": \"#32763f\",\n    }\n)\nc.shares_by_corporation",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#loan",
    "href": "game/engine/entities.html#loan",
    "title": "Game Entities",
    "section": "Loan",
    "text": "Loan\n\nsource\n\nLoan\n\n Loan (id, amount)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#minor",
    "href": "game/engine/entities.html#minor",
    "title": "Game Entities",
    "section": "Minor",
    "text": "Minor\n\nsource\n\nMinor\n\n Minor (sym, name, abilities=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#playerinfo",
    "href": "game/engine/entities.html#playerinfo",
    "title": "Game Entities",
    "section": "PlayerInfo",
    "text": "PlayerInfo\n\nsource\n\nPlayerInfo\n\n PlayerInfo (round_name, turn, round_no, player_value)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/entities.html#player",
    "href": "game/engine/entities.html#player",
    "title": "Game Entities",
    "section": "Player",
    "text": "Player\n\nsource\n\nPlayer\n\n Player (id, name)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Game Entities"
    ]
  },
  {
    "objectID": "game/engine/graph.html",
    "href": "game/engine/graph.html",
    "title": "Graph Parts",
    "section": "",
    "text": "source\n\n\n\n copy_dict (dict)",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#imports",
    "href": "game/engine/graph.html#imports",
    "title": "Graph Parts",
    "section": "",
    "text": "source\n\n\n\n copy_dict (dict)",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#base-part",
    "href": "game/engine/graph.html#base-part",
    "title": "Graph Parts",
    "section": "Base Part",
    "text": "Base Part\n\nsource\n\nBasePart\n\n BasePart (tile=None, index=None, loc=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#node",
    "href": "game/engine/graph.html#node",
    "title": "Graph Parts",
    "section": "Node",
    "text": "Node\n\nsource\n\nNode\n\n Node (lanes=None, paths=None, exits=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#path",
    "href": "game/engine/graph.html#path",
    "title": "Graph Parts",
    "section": "Path",
    "text": "Path\n\nsource\n\nPath\n\n Path (a, b, terminal=None, lanes=None, track='broad', ignore=None,\n       ignore_gauge_walk=None, ignore_gauge_compare=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#edge",
    "href": "game/engine/graph.html#edge",
    "title": "Graph Parts",
    "section": "Edge",
    "text": "Edge\n\nsource\n\nEdge\n\n Edge (num, lanes=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#frame",
    "href": "game/engine/graph.html#frame",
    "title": "Graph Parts",
    "section": "Frame",
    "text": "Frame\n\nsource\n\nFrame\n\n Frame (color, color2=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#future-label",
    "href": "game/engine/graph.html#future-label",
    "title": "Graph Parts",
    "section": "Future Label",
    "text": "Future Label\n\nsource\n\nFutureLabel\n\n FutureLabel (label=None, color=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#icon",
    "href": "game/engine/graph.html#icon",
    "title": "Graph Parts",
    "section": "Icon",
    "text": "Icon\n\nsource\n\nIcon\n\n Icon (image, name=None, sticky=True, blocks_lay=None, preprinted=True,\n       large=False, owner=None, loc=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#junction",
    "href": "game/engine/graph.html#junction",
    "title": "Graph Parts",
    "section": "Junction",
    "text": "Junction\n\nsource\n\nJunction\n\n Junction (lanes=[], **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#label",
    "href": "game/engine/graph.html#label",
    "title": "Graph Parts",
    "section": "Label",
    "text": "Label\n\nsource\n\nLabel\n\n Label (label=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#partition",
    "href": "game/engine/graph.html#partition",
    "title": "Graph Parts",
    "section": "Partition",
    "text": "Partition\n\nsource\n\nPartition\n\n Partition (a, b, type, restrict)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#stripes",
    "href": "game/engine/graph.html#stripes",
    "title": "Graph Parts",
    "section": "Stripes",
    "text": "Stripes\n\nsource\n\nStripes\n\n Stripes (color, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#stub",
    "href": "game/engine/graph.html#stub",
    "title": "Graph Parts",
    "section": "Stub",
    "text": "Stub\n\nsource\n\nStub\n\n Stub (edge, track='broad', **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#upgrade",
    "href": "game/engine/graph.html#upgrade",
    "title": "Graph Parts",
    "section": "Upgrade",
    "text": "Upgrade\n\nsource\n\nUpgrade\n\n Upgrade (cost, terrains=[], size=0, loc=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#revenue-center",
    "href": "game/engine/graph.html#revenue-center",
    "title": "Graph Parts",
    "section": "Revenue Center",
    "text": "Revenue Center\n\nsource\n\nRevenueCenter\n\n RevenueCenter (revenue, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#border",
    "href": "game/engine/graph.html#border",
    "title": "Graph Parts",
    "section": "Border",
    "text": "Border\n\nsource\n\nBorder\n\n Border (edge, type=None, cost=None, color=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#city",
    "href": "game/engine/graph.html#city",
    "title": "Graph Parts",
    "section": "City",
    "text": "City\n\nsource\n\nCity\n\n City (revenue, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#town",
    "href": "game/engine/graph.html#town",
    "title": "Graph Parts",
    "section": "Town",
    "text": "Town\n\nsource\n\nTown\n\n Town (revenue, to_city=None, boom=None, style=None, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#halt",
    "href": "game/engine/graph.html#halt",
    "title": "Graph Parts",
    "section": "Halt",
    "text": "Halt\n\nsource\n\nHalt\n\n Halt (symbol, revenue='0', route='optional', **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#offboard",
    "href": "game/engine/graph.html#offboard",
    "title": "Graph Parts",
    "section": "Offboard",
    "text": "Offboard\n\nsource\n\nOffboard\n\n Offboard (revenue, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#pass",
    "href": "game/engine/graph.html#pass",
    "title": "Graph Parts",
    "section": "Pass",
    "text": "Pass\n\nsource\n\nPass\n\n Pass (revenue, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#token",
    "href": "game/engine/graph.html#token",
    "title": "Graph Parts",
    "section": "Token",
    "text": "Token\n\nsource\n\nToken\n\n Token (corporation, price=0, logo=None, simple_logo=None, type='normal')\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#graph",
    "href": "game/engine/graph.html#graph",
    "title": "Graph Parts",
    "section": "Graph",
    "text": "Graph\n\nsource\n\nGraph\n\n Graph (game, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#distance-graph",
    "href": "game/engine/graph.html#distance-graph",
    "title": "Graph Parts",
    "section": "Distance Graph",
    "text": "Distance Graph\n\nsource\n\nDistanceGraph\n\n DistanceGraph (game, separate_node_types=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#route",
    "href": "game/engine/graph.html#route",
    "title": "Graph Parts",
    "section": "Route",
    "text": "Route\n\nsource\n\nRoute\n\n Route (game, phase, train, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#tile-config-minimize-pls",
    "href": "game/engine/graph.html#tile-config-minimize-pls",
    "title": "Graph Parts",
    "section": "Tile Config (Minimize pls)",
    "text": "Tile Config (Minimize pls)\n\nsource\n\nTileConfig\n\n TileConfig ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#tile",
    "href": "game/engine/graph.html#tile",
    "title": "Graph Parts",
    "section": "Tile",
    "text": "Tile\n\nsource\n\nTile\n\n Tile (name, code, color, parts, rotation=0, preprinted=False, index=0,\n       location_name=None, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "game/engine/graph.html#hex",
    "href": "game/engine/graph.html#hex",
    "title": "Graph Parts",
    "section": "Hex",
    "text": "Hex\n\nsource\n\nHex\n\n Hex (coordinates, layout=None, axes=None, tile=None, location_name=None,\n      hide_location_name=False, empty=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Graph Parts"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "import rl18xx.game\n#import rl18xx.agent",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "18XX Reinforment Learning Agent (WIP)",
    "section": "",
    "text": "This repository contains the Python implementation of 1830 (converted from the original Ruby implementation in https://github.com/tobymao/18xx) and an agent for playing the game, trained by reinforment learning.\nAs of April 2024, this project is still under active development. The game engine implementation is complete (and is outlined below), but I am still doing research around the agent implementation.",
    "crumbs": [
      "18XX Reinforment Learning Agent (WIP)"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "18XX Reinforment Learning Agent (WIP)",
    "section": "Install",
    "text": "Install\npip install rl18xx",
    "crumbs": [
      "18XX Reinforment Learning Agent (WIP)"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "18XX Reinforment Learning Agent (WIP)",
    "section": "How to use",
    "text": "How to use\nThe Python game engine can be accessed under the rl18xx.game.engine module and currently only supports 1830. You can create an instance of your game using the following code:\n\nfrom rl18xx.game.gamemap import GameMap\n\ngame_map = GameMap()\ngame = game_map.game_by_title(\"1830\")\ng = game({\"1\": \"Player 1\", \"2\": \"Player 2\", \"3\": \"Player 3\", \"4\": \"Player 4\"})\n\nThere is also an ActionHelper class that can be used to find all valid actions at each point in the game using the following method:\n\nfrom rl18xx.game.actionfinder import ActionHelper\naction_helper = ActionHelper(g)\n\naction_helper.get_all_choices()[:10]\n\n[Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: SV&gt;, price: 20,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 45,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 50,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 55,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 60,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 65,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 70,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 75,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 80,\n Type: Bid, id: None, entity: Player - Player 1, company: &lt;Company: CS&gt;, price: 85]\n\n\nYou can then perform that any action from that list by giving it to the game’s process_action method:\n\ng.process_action(action_helper.get_all_choices()[0])\naction_helper.get_all_choices()[:10]\n\n[Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: CS&gt;, price: 40,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 75,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 80,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 85,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 90,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 95,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 100,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 105,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 110,\n Type: Bid, id: None, entity: Player - Player 2, company: &lt;Company: DH&gt;, price: 115]\n\n\nA full game walkthrough in this format can be seen in the 02_game_test.ipynb notebook under the game directory.",
    "crumbs": [
      "18XX Reinforment Learning Agent (WIP)"
    ]
  },
  {
    "objectID": "game/engine/core.html",
    "href": "game/engine/core.html",
    "title": "Core",
    "section": "",
    "text": "This notebook contains the basic high-level types and helper methods used by other parts of the engine.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#helper-methods",
    "href": "game/engine/core.html#helper-methods",
    "title": "Core",
    "section": "Helper Methods",
    "text": "Helper Methods\n\nsource\n\nsnake_to_pascal\n\n snake_to_pascal (snake_str)\n\n\nsource\n\n\npascal_to_snake\n\n pascal_to_snake (pascal_str)",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#errors",
    "href": "game/engine/core.html#errors",
    "title": "Core",
    "section": "Errors",
    "text": "Errors\n\nsource\n\nReusesCity\nUnspecified run-time error.\n\nsource\n\n\nRouteTooLong\nUnspecified run-time error.\n\nsource\n\n\nRouteTooShort\nUnspecified run-time error.\n\nsource\n\n\nNoToken\nUnspecified run-time error.\n\nsource\n\n\nOptionError\nUnspecified run-time error.\n\nsource\n\n\nGameError\nUnspecified run-time error.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#logging",
    "href": "game/engine/core.html#logging",
    "title": "Core",
    "section": "Logging",
    "text": "Logging\nA game log that stores messages along with associated action IDs.\n\nsource\n\nGameLog\n\n GameLog (game)\n\nBuilt-in mutable sequence.\nIf no argument is given, the constructor creates a new empty list. The argument must be an iterable if specified.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#assignable",
    "href": "game/engine/core.html#assignable",
    "title": "Core",
    "section": "Assignable",
    "text": "Assignable\n\nsource\n\nAssignable\n\n Assignable ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#entity",
    "href": "game/engine/core.html#entity",
    "title": "Core",
    "section": "Entity",
    "text": "Entity\nIntended to be inherited by all Game Entities.\n\nsource\n\nEntity\n\n Entity ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#item",
    "href": "game/engine/core.html#item",
    "title": "Core",
    "section": "Item",
    "text": "Item\n\nsource\n\nItem\n\n Item (description='', cost=0)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#ownable",
    "href": "game/engine/core.html#ownable",
    "title": "Core",
    "section": "Ownable",
    "text": "Ownable\nAn interface inherited by all entities that can be owned. Contains an owner field and helper methods.\n\nsource\n\nOwnable\n\n Ownable ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#passer",
    "href": "game/engine/core.html#passer",
    "title": "Core",
    "section": "Passer",
    "text": "Passer\nContains methods around passing. Should be inherited by anything that can act in the stock round.\n\nsource\n\nPasser\n\n Passer ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#share-price",
    "href": "game/engine/core.html#share-price",
    "title": "Core",
    "section": "Share Price",
    "text": "Share Price\n\nsource\n\nSharePrice\n\n SharePrice (code, row, column, unlimited_types=None,\n             multiple_buy_types=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#shareholder",
    "href": "game/engine/core.html#shareholder",
    "title": "Core",
    "section": "Shareholder",
    "text": "Shareholder\n\nsource\n\nShareHolder\n\n ShareHolder ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#spender",
    "href": "game/engine/core.html#spender",
    "title": "Core",
    "section": "Spender",
    "text": "Spender\n\nsource\n\nSpender\n\n Spender ()\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#stock-movement",
    "href": "game/engine/core.html#stock-movement",
    "title": "Core",
    "section": "Stock Movement",
    "text": "Stock Movement\n\nsource\n\nZigZagMovement\n\n ZigZagMovement (market, ledge_movement)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nOneDimensionalMovement\n\n OneDimensionalMovement (market)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nTwoDimensionalMovement\n\n TwoDimensionalMovement (market)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nsource\n\n\nBaseMovement\n\n BaseMovement (market)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#stock-market",
    "href": "game/engine/core.html#stock-market",
    "title": "Core",
    "section": "Stock Market",
    "text": "Stock Market\n\nsource\n\nStockMarket\n\n StockMarket (market, unlimited_types, multiple_buy_types=None,\n              zigzag=None, ledge_movement=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/core.html#phase",
    "href": "game/engine/core.html#phase",
    "title": "Core",
    "section": "Phase",
    "text": "Phase\n\nsource\n\nPhase\n\n Phase (phases, game)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Core"
    ]
  },
  {
    "objectID": "game/engine/round.html#basestep",
    "href": "game/engine/round.html#basestep",
    "title": "Rounds and Steps",
    "section": "BaseStep",
    "text": "BaseStep\n\nsource\n\nBaseStep\n\n BaseStep (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Rounds and Steps"
    ]
  },
  {
    "objectID": "game/engine/round.html#step-classes",
    "href": "game/engine/round.html#step-classes",
    "title": "Rounds and Steps",
    "section": "Step classes",
    "text": "Step classes\n\nAuctioner\n\nsource\n\n\nAuctioner\n\n Auctioner ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nProgrammer\n\nsource\n\n\nProgrammer\n\n Programmer ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nShare Buying\n\nsource\n\n\nShareBuying\n\n ShareBuying ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nEmergency Money\n\nsource\n\n\nEmergencyMoney\n\n EmergencyMoney ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nTrain\n\nsource\n\n\nTrain\n\n Train (game)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nBuy Train\n\nsource\n\n\nBuyTrain\n\n BuyTrain (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nPassable Auction\n\nsource\n\n\nPassableAuction\n\n PassableAuction ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nTokener\n\nsource\n\n\nTokener\n\n Tokener ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nToken Merger\n\nsource\n\n\nTokenMerger\n\n TokenMerger ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nAcquire Company\n\nsource\n\n\nAcquireCompany\n\n AcquireCompany (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nAssign\n\nsource\n\n\nAssign\n\n Assign (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nAutomatic Loan\n\nsource\n\n\nAutomaticLoan\n\n AutomaticLoan ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nBankrupt\n\nsource\n\n\nBankrupt\n\n Bankrupt (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nBuy Company\n\nsource\n\n\nBuyCompany\n\n BuyCompany (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nBuy/Sell/Par Shares\n\nsource\n\n\nBuySellParShares\n\n BuySellParShares (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nBuy/Sell/Par Shares Companies\n\nsource\n\n\nBuySellParSharesCompanies\n\n BuySellParSharesCompanies (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nBuy/Sell/Par Shares via Bid\n\nsource\n\n\nBuySellParSharesViaBid\n\n BuySellParSharesViaBid (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nBuy Single Train of Type\n\nsource\n\n\nBuySingleTrainOfType\n\n BuySingleTrainOfType (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nCompany Pending Par\n\nsource\n\n\nCompanyPendingPar\n\n CompanyPendingPar (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nConcession Auction\n\nsource\n\n\nConcessionAuction\n\n ConcessionAuction (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nCorporate Buy Shares\n\nsource\n\n\nCorporateBuyShares\n\n CorporateBuyShares (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nCorporate Sell Shares\n\nsource\n\n\nCorporateSellShares\n\n CorporateSellShares (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nDiscard Train\n\nsource\n\n\nDiscardTrain\n\n DiscardTrain (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nDividend\n\nsource\n\n\nDividend\n\n Dividend (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nEnd Game\n\nsource\n\n\nEndGame\n\n EndGame (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nExchange\n\nsource\n\n\nExchange\n\n Exchange (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nHalf Pay\n\nsource\n\n\nHalfPay\n\n HalfPay ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nHome Token\n\nsource\n\n\nHomeToken\n\n HomeToken (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nIssue Shares\n\nsource\n\n\nIssueShares\n\n IssueShares (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nMessage\n\nsource\n\n\nMessage\n\n Message (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nMinor Half Pay\n\nsource\n\n\nMinorHalfPay\n\n MinorHalfPay ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nMinor Withold\n\nsource\n\n\nMinorWithhold\n\n MinorWithhold ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nProgram\n\nsource\n\n\nProgram\n\n Program (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nProgrammer Auction Bid\n\nsource\n\n\nProgrammerAuctionBid\n\n ProgrammerAuctionBid ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nProgrammer Merger Pass\n\nsource\n\n\nProgrammerMergerPass\n\n ProgrammerMergerPass ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nReduce Tokens\n\nsource\n\n\nReduceTokens\n\n ReduceTokens (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nReturn Token\n\nsource\n\n\nReturnToken\n\n ReturnToken (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nRoute\n\nsource\n\n\nRoute\n\n Route (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nSelection Auction\n\nsource\n\n\nSelectionAuction\n\n SelectionAuction (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nSimple Draft\n\nsource\n\n\nSimpleDraft\n\n SimpleDraft (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nSingle Depot Train Buy\n\nsource\n\n\nSingleDepotTrainBuy\n\n SingleDepotTrainBuy (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nSpecial Buy Train\n\nsource\n\n\nSpecialBuyTrain\n\n SpecialBuyTrain (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nSpecial Buy\n\nsource\n\n\nSpecialBuy\n\n SpecialBuy (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nSpecial Choose\n\nsource\n\n\nSpecialChoose\n\n SpecialChoose (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nSpecial Token\n\nsource\n\n\nSpecialToken\n\n SpecialToken (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nTracker\n\nsource\n\n\nTracker\n\n Tracker ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nSpecial Track\n\nsource\n\n\nSpecialTrack\n\n SpecialTrack (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nToken\n\nsource\n\n\nToken\n\n Token (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nTrack\n\nsource\n\n\nTrack\n\n Track (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nTrack and Token\n\nsource\n\n\nTrackAndToken\n\n TrackAndToken (game, round, **opts)\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nTrack Lay When Company Sold\n\nsource\n\n\nTrackLayWhenCompanySold\n\n TrackLayWhenCompanySold ()\n\nInitialize self. See help(type(self)) for accurate signature.\n\n\nWaterfall Auction\n\nsource\n\n\nWaterfallAuction\n\n WaterfallAuction (game, round, **kwargs)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Rounds and Steps"
    ]
  },
  {
    "objectID": "game/engine/autorouter.html",
    "href": "game/engine/autorouter.html",
    "title": "Auto Router",
    "section": "",
    "text": "source\n\nAutoRouter\n\n AutoRouter (game, flash=None, debug=False, verbose=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Auto Router"
    ]
  },
  {
    "objectID": "game/engine/game/base.html",
    "href": "game/engine/game/base.html",
    "title": "Base Game Implementation",
    "section": "",
    "text": "This class contains the base implementation of an 18xx game.\ngame.engine.game.base.Meta is a template class for holding metadata about a specific title. It contains safe defaults and outlines what information needs to be included when adding another game. Each of these fields should be overwritten by a title-specific Meta class in that title’s notebook.\n\nsource\n\nMeta\n\n Meta ()\n\nInitialize self. See help(type(self)) for accurate signature.\nThis is a big ass class and I have to define it in one big block otherwise I would be splitting out these code comments into markdown. Sorry about that. I’ll do my best to duplicate them though.\n\nsource\n\n\nBaseGame\n\n BaseGame (names, metadata, entities, map, id=0, actions=None,\n           at_action=None, pin=None, strict=False, optional_rules=None,\n           user=None, seed=None)\n\nInitialize self. See help(type(self)) for accurate signature.\n\nBaseGame.GAME_END_CHECK\n\n{'bankrupt': 'immediate', 'bank': 'full_or'}",
    "crumbs": [
      "game",
      "engine",
      "game",
      "Base Game Implementation"
    ]
  },
  {
    "objectID": "game/engine/actions.html",
    "href": "game/engine/actions.html",
    "title": "Actions",
    "section": "",
    "text": "source\n\n\n\n BaseAction (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#acquire-company",
    "href": "game/engine/actions.html#acquire-company",
    "title": "Actions",
    "section": "Acquire Company",
    "text": "Acquire Company\n\nsource\n\nAcquireCompany\n\n AcquireCompany (entity, company)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#assign",
    "href": "game/engine/actions.html#assign",
    "title": "Actions",
    "section": "Assign",
    "text": "Assign\n\nsource\n\nAssign\n\n Assign (entity, target)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#bankrupt",
    "href": "game/engine/actions.html#bankrupt",
    "title": "Actions",
    "section": "Bankrupt",
    "text": "Bankrupt\n\nsource\n\nBankrupt\n\n Bankrupt (entity, option=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#bid",
    "href": "game/engine/actions.html#bid",
    "title": "Actions",
    "section": "Bid",
    "text": "Bid\n\nsource\n\nBid\n\n Bid (entity, price, company=None, corporation=None, minor=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#blind-bid",
    "href": "game/engine/actions.html#blind-bid",
    "title": "Actions",
    "section": "Blind Bid",
    "text": "Blind Bid\n\nsource\n\nBlindBid\n\n BlindBid (entity, bids=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#borrow-train",
    "href": "game/engine/actions.html#borrow-train",
    "title": "Actions",
    "section": "Borrow Train",
    "text": "Borrow Train\n\nsource\n\nBorrowTrain\n\n BorrowTrain (entity, train)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#buy-company",
    "href": "game/engine/actions.html#buy-company",
    "title": "Actions",
    "section": "Buy Company",
    "text": "Buy Company\n\nsource\n\nBuyCompany\n\n BuyCompany (entity, company, price)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#buy-corporation",
    "href": "game/engine/actions.html#buy-corporation",
    "title": "Actions",
    "section": "Buy Corporation",
    "text": "Buy Corporation\n\nsource\n\nBuyCorporation\n\n BuyCorporation (entity, price, corporation=None, minor=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#buy-power",
    "href": "game/engine/actions.html#buy-power",
    "title": "Actions",
    "section": "Buy Power",
    "text": "Buy Power\n\nsource\n\nBuyPower\n\n BuyPower (entity, power)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#buy-shares",
    "href": "game/engine/actions.html#buy-shares",
    "title": "Actions",
    "section": "Buy Shares",
    "text": "Buy Shares\n\nsource\n\nBuyShares\n\n BuyShares (entity, shares, share_price=None, percent=None, swap=None,\n            purchase_for=None, borrow_from=None, total_price=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#sell-shares",
    "href": "game/engine/actions.html#sell-shares",
    "title": "Actions",
    "section": "Sell Shares",
    "text": "Sell Shares\n\nsource\n\nSellShares\n\n SellShares (entity, shares, share_price=None, percent=None, swap=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#buy-token",
    "href": "game/engine/actions.html#buy-token",
    "title": "Actions",
    "section": "Buy Token",
    "text": "Buy Token\n\nsource\n\nBuyToken\n\n BuyToken (entity, city, slot, price)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#buy-train",
    "href": "game/engine/actions.html#buy-train",
    "title": "Actions",
    "section": "Buy Train",
    "text": "Buy Train\n\nsource\n\nBuyTrain\n\n BuyTrain (entity, train, price, variant=None, exchange=None, shell=None,\n           slots=None, extra_due=None, warranties=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#choose",
    "href": "game/engine/actions.html#choose",
    "title": "Actions",
    "section": "Choose",
    "text": "Choose\n\nsource\n\nChoose\n\n Choose (entity, choice)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#choose-ability",
    "href": "game/engine/actions.html#choose-ability",
    "title": "Actions",
    "section": "Choose Ability",
    "text": "Choose Ability\n\nsource\n\nChooseAbility\n\n ChooseAbility (entity, choice)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#claim-hex-token",
    "href": "game/engine/actions.html#claim-hex-token",
    "title": "Actions",
    "section": "Claim Hex Token",
    "text": "Claim Hex Token\n\nsource\n\nClaimHexToken\n\n ClaimHexToken (entity, hex, token_type=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#combined-trains",
    "href": "game/engine/actions.html#combined-trains",
    "title": "Actions",
    "section": "Combined Trains",
    "text": "Combined Trains\n\nsource\n\nCombinedTrains\n\n CombinedTrains (entity, base, additional_train, additional_train_variant)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#convert",
    "href": "game/engine/actions.html#convert",
    "title": "Actions",
    "section": "Convert",
    "text": "Convert\n\nsource\n\nConvert\n\n Convert (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#corporate-buy-shares",
    "href": "game/engine/actions.html#corporate-buy-shares",
    "title": "Actions",
    "section": "Corporate Buy Shares",
    "text": "Corporate Buy Shares\n\nsource\n\nCorporateBuyShares\n\n CorporateBuyShares (entity, shares, share_price=None, percent=None,\n                     swap=None, purchase_for=None, borrow_from=None,\n                     total_price=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#corporate-sell-shares",
    "href": "game/engine/actions.html#corporate-sell-shares",
    "title": "Actions",
    "section": "Corporate Sell Shares",
    "text": "Corporate Sell Shares\n\nsource\n\nCorporateSellShares\n\n CorporateSellShares (entity, shares, share_price=None, percent=None,\n                      swap=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#credit-mobilier",
    "href": "game/engine/actions.html#credit-mobilier",
    "title": "Actions",
    "section": "Credit Mobilier",
    "text": "Credit Mobilier\n\nsource\n\nCreditMobilier\n\n CreditMobilier (entity, hex, amount)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#destination-connection",
    "href": "game/engine/actions.html#destination-connection",
    "title": "Actions",
    "section": "Destination Connection",
    "text": "Destination Connection\n\nsource\n\nDestinationConnection\n\n DestinationConnection (entity, corporations=None, minors=None,\n                        hexes=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#discard-train",
    "href": "game/engine/actions.html#discard-train",
    "title": "Actions",
    "section": "Discard Train",
    "text": "Discard Train\n\nsource\n\nDiscardTrain\n\n DiscardTrain (entity, train)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#dividend",
    "href": "game/engine/actions.html#dividend",
    "title": "Actions",
    "section": "Dividend",
    "text": "Dividend\n\nsource\n\nDividend\n\n Dividend (entity, kind, amount=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#double-head-trains",
    "href": "game/engine/actions.html#double-head-trains",
    "title": "Actions",
    "section": "Double Head Trains",
    "text": "Double Head Trains\n\nsource\n\nDoubleHeadTrains\n\n DoubleHeadTrains (entity, trains)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#end-game",
    "href": "game/engine/actions.html#end-game",
    "title": "Actions",
    "section": "End Game",
    "text": "End Game\n\nsource\n\nEndGame\n\n EndGame (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#failed-merge",
    "href": "game/engine/actions.html#failed-merge",
    "title": "Actions",
    "section": "Failed Merge",
    "text": "Failed Merge\n\nsource\n\nFailedMerge\n\n FailedMerge (entity, corporations)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#hex-token",
    "href": "game/engine/actions.html#hex-token",
    "title": "Actions",
    "section": "Hex Token",
    "text": "Hex Token\n\nsource\n\nHexToken\n\n HexToken (entity, hex, cost=None, token_type=None, token=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#lay-tile",
    "href": "game/engine/actions.html#lay-tile",
    "title": "Actions",
    "section": "Lay Tile",
    "text": "Lay Tile\n\nsource\n\nLayTile\n\n LayTile (entity, tile, hex, rotation, combo_entities=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#message",
    "href": "game/engine/actions.html#message",
    "title": "Actions",
    "section": "Message",
    "text": "Message\n\nsource\n\nMessage\n\n Message (entity, message)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#log",
    "href": "game/engine/actions.html#log",
    "title": "Actions",
    "section": "Log",
    "text": "Log\n\nsource\n\nLog\n\n Log (entity, message)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#manual-close-company",
    "href": "game/engine/actions.html#manual-close-company",
    "title": "Actions",
    "section": "Manual Close Company",
    "text": "Manual Close Company\n\nsource\n\nManualCloseCompany\n\n ManualCloseCompany (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#merge",
    "href": "game/engine/actions.html#merge",
    "title": "Actions",
    "section": "Merge",
    "text": "Merge\n\nsource\n\nMerge\n\n Merge (entity, corporation=None, minor=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#move-bid",
    "href": "game/engine/actions.html#move-bid",
    "title": "Actions",
    "section": "Move Bid",
    "text": "Move Bid\n\nsource\n\nMoveBid\n\n MoveBid (entity, price, from_company, from_price, company=None,\n          corporation=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#offer",
    "href": "game/engine/actions.html#offer",
    "title": "Actions",
    "section": "Offer",
    "text": "Offer\n\nsource\n\nOffer\n\n Offer (entity, corporation=None, company=None, price=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#par",
    "href": "game/engine/actions.html#par",
    "title": "Actions",
    "section": "Par",
    "text": "Par\n\nsource\n\nPar\n\n Par (entity, corporation, share_price, slot=None, purchase_for=None,\n      borrow_from=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#pass",
    "href": "game/engine/actions.html#pass",
    "title": "Actions",
    "section": "Pass",
    "text": "Pass\n\nsource\n\nPass\n\n Pass (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#pay-off-debt",
    "href": "game/engine/actions.html#pay-off-debt",
    "title": "Actions",
    "section": "Pay off Debt",
    "text": "Pay off Debt\n\nsource\n\nPayoffDebt\n\n PayoffDebt (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#take-loan",
    "href": "game/engine/actions.html#take-loan",
    "title": "Actions",
    "section": "Take Loan",
    "text": "Take Loan\n\nsource\n\nTakeLoan\n\n TakeLoan (entity, loan)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#pay-off-loan",
    "href": "game/engine/actions.html#pay-off-loan",
    "title": "Actions",
    "section": "Pay off Loan",
    "text": "Pay off Loan\n\nsource\n\nPayoffDebt\n\n PayoffDebt (entity, loan)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#pay-off-player-debt",
    "href": "game/engine/actions.html#pay-off-player-debt",
    "title": "Actions",
    "section": "Pay off Player Debt",
    "text": "Pay off Player Debt\n\nsource\n\nPayoffPlayerDebt\n\n PayoffPlayerDebt (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#place-token",
    "href": "game/engine/actions.html#place-token",
    "title": "Actions",
    "section": "Place Token",
    "text": "Place Token\n\nsource\n\nPlaceToken\n\n PlaceToken (entity, city, slot, cost=None, tokener=None, token_type=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-enable",
    "href": "game/engine/actions.html#program-enable",
    "title": "Actions",
    "section": "Program Enable",
    "text": "Program Enable\n\nsource\n\nProgramEnable\n\n ProgramEnable (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-disable",
    "href": "game/engine/actions.html#program-disable",
    "title": "Actions",
    "section": "Program Disable",
    "text": "Program Disable\n\nsource\n\nProgramDisable\n\n ProgramDisable (entity, reason, original_type=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-auction-bid",
    "href": "game/engine/actions.html#program-auction-bid",
    "title": "Actions",
    "section": "Program Auction Bid",
    "text": "Program Auction Bid\n\nsource\n\nProgramAuctionBid\n\n ProgramAuctionBid (entity, bid_target, maximum_bid, buy_price,\n                    enable_maximum_bid=False, enable_buy_price=False,\n                    auto_pass_after=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-buy-shares",
    "href": "game/engine/actions.html#program-buy-shares",
    "title": "Actions",
    "section": "Program Buy Shares",
    "text": "Program Buy Shares\n\nsource\n\nProgramBuyShares\n\n ProgramBuyShares (entity, corporation, until_condition,\n                   from_market=False, auto_pass_after=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-close-pass",
    "href": "game/engine/actions.html#program-close-pass",
    "title": "Actions",
    "section": "Program Close Pass",
    "text": "Program Close Pass\n\nsource\n\nProgramClosePass\n\n ProgramClosePass (entity, unconditional=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-harzbahn-draft-pass",
    "href": "game/engine/actions.html#program-harzbahn-draft-pass",
    "title": "Actions",
    "section": "Program Harzbahn Draft Pass",
    "text": "Program Harzbahn Draft Pass\n\nsource\n\nProgramHarzbahnDraftPass\n\n ProgramHarzbahnDraftPass (entity, until_premium, unconditional)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-independent-mines",
    "href": "game/engine/actions.html#program-independent-mines",
    "title": "Actions",
    "section": "Program Independent Mines",
    "text": "Program Independent Mines\n\nsource\n\nProgramIndependentMines\n\n ProgramIndependentMines (entity, skip_track, skip_buy, skip_close,\n                          indefinite)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-merger-pass",
    "href": "game/engine/actions.html#program-merger-pass",
    "title": "Actions",
    "section": "Program Merger Pass",
    "text": "Program Merger Pass\n\nsource\n\nProgramMergerPass\n\n ProgramMergerPass (entity, corporations_by_round, options)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#program-share-pass",
    "href": "game/engine/actions.html#program-share-pass",
    "title": "Actions",
    "section": "Program Share Pass",
    "text": "Program Share Pass\n\nsource\n\nProgramSharePass\n\n ProgramSharePass (entity, unconditional=False, indefinite=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#purchase-train",
    "href": "game/engine/actions.html#purchase-train",
    "title": "Actions",
    "section": "Purchase Train",
    "text": "Purchase Train\n\nsource\n\nPurchaseTrain\n\n PurchaseTrain (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#reassign-trains",
    "href": "game/engine/actions.html#reassign-trains",
    "title": "Actions",
    "section": "Reassign Trains",
    "text": "Reassign Trains\n\nsource\n\nReassignTrains\n\n ReassignTrains (entity, assignments=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#redo",
    "href": "game/engine/actions.html#redo",
    "title": "Actions",
    "section": "Redo",
    "text": "Redo\n\nsource\n\nRedo\n\n Redo (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#remove-hex-token",
    "href": "game/engine/actions.html#remove-hex-token",
    "title": "Actions",
    "section": "Remove Hex Token",
    "text": "Remove Hex Token\n\nsource\n\nRemoveHexToken\n\n RemoveHexToken (entity, hex)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#remove-token",
    "href": "game/engine/actions.html#remove-token",
    "title": "Actions",
    "section": "Remove Token",
    "text": "Remove Token\n\nsource\n\nRemoveToken\n\n RemoveToken (entity, city, slot)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#respond",
    "href": "game/engine/actions.html#respond",
    "title": "Actions",
    "section": "Respond",
    "text": "Respond\n\nsource\n\nRespond\n\n Respond (entity, corporation, company, accept)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#run-routes",
    "href": "game/engine/actions.html#run-routes",
    "title": "Actions",
    "section": "Run Routes",
    "text": "Run Routes\n\nsource\n\nRunRoutes\n\n RunRoutes (entity, routes, extra_revenue=0)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#scrap-train",
    "href": "game/engine/actions.html#scrap-train",
    "title": "Actions",
    "section": "Scrap Train",
    "text": "Scrap Train\n\nsource\n\nScrapTrain\n\n ScrapTrain (entity, train)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#sell-company",
    "href": "game/engine/actions.html#sell-company",
    "title": "Actions",
    "section": "Sell Company",
    "text": "Sell Company\n\nsource\n\nSellCompany\n\n SellCompany (entity, company, price)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#short",
    "href": "game/engine/actions.html#short",
    "title": "Actions",
    "section": "Short",
    "text": "Short\n\nsource\n\nShort\n\n Short (entity, corporation)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#special-buy",
    "href": "game/engine/actions.html#special-buy",
    "title": "Actions",
    "section": "Special Buy",
    "text": "Special Buy\n\nsource\n\nSpecialBuy\n\n SpecialBuy (entity, item)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#split",
    "href": "game/engine/actions.html#split",
    "title": "Actions",
    "section": "Split",
    "text": "Split\n\nsource\n\nSplit\n\n Split (entity, corporation)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#swap-train",
    "href": "game/engine/actions.html#swap-train",
    "title": "Actions",
    "section": "Swap Train",
    "text": "Swap Train\n\nsource\n\nSwapTrain\n\n SwapTrain (entity, train)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#switch-trains",
    "href": "game/engine/actions.html#switch-trains",
    "title": "Actions",
    "section": "Switch Trains",
    "text": "Switch Trains\n\nsource\n\nSwitchTrains\n\n SwitchTrains (entity, slots=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#undo",
    "href": "game/engine/actions.html#undo",
    "title": "Actions",
    "section": "Undo",
    "text": "Undo\n\nsource\n\nUndo\n\n Undo (entity, action_id=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#use-graph",
    "href": "game/engine/actions.html#use-graph",
    "title": "Actions",
    "section": "Use Graph",
    "text": "Use Graph\n\nsource\n\nUseGraph\n\n UseGraph (entity, graph_id)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#view-merge-options",
    "href": "game/engine/actions.html#view-merge-options",
    "title": "Actions",
    "section": "View Merge Options",
    "text": "View Merge Options\n\nsource\n\nViewMergeOptions\n\n ViewMergeOptions (entity)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/engine/actions.html#operating-info",
    "href": "game/engine/actions.html#operating-info",
    "title": "Actions",
    "section": "Operating Info",
    "text": "Operating Info\n\nsource\n\nOperatingInfo\n\n OperatingInfo (runs, dividend, revenue, laid_hexes, dividend_kind=None)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "engine",
      "Actions"
    ]
  },
  {
    "objectID": "game/action_finder.html",
    "href": "game/action_finder.html",
    "title": "Actions Helper",
    "section": "",
    "text": "source\n\nActionHelper\n\n ActionHelper (game, print_enabled=False)\n\nInitialize self. See help(type(self)) for accurate signature.",
    "crumbs": [
      "game",
      "Actions Helper"
    ]
  }
]