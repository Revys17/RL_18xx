Metadata-Version: 2.4
Name: rl-18xx
Version: 0.1.0
Summary: Add your description here
Requires-Python: >=3.13
Description-Content-Type: text/markdown
License-File: LICENSE
Dynamic: license-file

# 18XX Reinforment Learning Agent (WIP)


<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->

This repository contains the Python implementation of 1830 (converted
from the original Ruby implementation in
https://github.com/tobymao/18xx) and an agent for playing the game,
trained by reinforment learning.

As of April 2024, this project is still under active development. The
game engine implementation is complete (and is outlined below), but I am
still doing research around the agent implementation.

## Install

``` sh
pip install rl18xx
```

## How to use

The Python game engine can be accessed under the rl18xx.game.engine
module and currently only supports 1830. You can create an instance of
your game using the following code:

``` python
from rl18xx.game.gamemap import GameMap

game_map = GameMap()
game = game_map.game_by_title("1830")
g = game({"1": "Player 1", "2": "Player 2", "3": "Player 3", "4": "Player 4"})
```

There is also an ActionHelper class that can be used to find all valid
actions at each point in the game using the following method:

``` python
from rl18xx.game.actionfinder import ActionHelper
action_helper = ActionHelper(g)

action_helper.get_all_choices()[:10]
```

    [Type: Bid, id: None, entity: Player - Player 1, company: <Company: SV>, price: 20,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 45,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 50,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 55,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 60,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 65,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 70,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 75,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 80,
     Type: Bid, id: None, entity: Player - Player 1, company: <Company: CS>, price: 85]

You can then perform that any action from that list by giving it to the
gameâ€™s `process_action` method:

``` python
g.process_action(action_helper.get_all_choices()[0])
action_helper.get_all_choices()[:10]
```

    [Type: Bid, id: None, entity: Player - Player 2, company: <Company: CS>, price: 40,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 75,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 80,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 85,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 90,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 95,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 100,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 105,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 110,
     Type: Bid, id: None, entity: Player - Player 2, company: <Company: DH>, price: 115]

A full game walkthrough in this format can be seen in the
02_game_test.ipynb notebook under the `game` directory.
